{
  "stats": {
    "suites": 10,
    "tests": 15,
    "passes": 4,
    "pending": 0,
    "failures": 11,
    "start": "2022-09-12T11:31:24.353Z",
    "end": "2022-09-12T11:31:32.325Z",
    "duration": 7972,
    "testsRegistered": 27,
    "passPercent": 14.814814814814813,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 12,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "e1db7572-a84f-4195-a202-92b1b3845221",
      "title": "",
      "fullFile": "cypress\\tests\\app.cy.js",
      "file": "cypress\\tests\\app.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cddb3410-dabd-424e-a22e-1aaf1a6bbbf8",
          "title": "TodoMVC - React",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3a679cb9-2845-4b0d-9d7b-385672e54d21",
              "title": "Add todo test presentation",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should add 2 todos",
                  "fullTitle": "TodoMVC - React Add todo test presentation Should add 2 todos",
                  "timedOut": null,
                  "duration": 668,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.new-todo').type('learn testing{enter}').type('be cool{enter}');\ncy.get('.todo-list li').should('have.length', 2);",
                  "err": {},
                  "uuid": "60e12934-87ab-42b8-8c21-0829b8c474a4",
                  "parentUUID": "3a679cb9-2845-4b0d-9d7b-385672e54d21",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "60e12934-87ab-42b8-8c21-0829b8c474a4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 668,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "726c67ed-fdb9-4d81-8835-c59090d8ee70",
              "title": "New Todo",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to add todo items",
                  "fullTitle": "TodoMVC - React New Todo should allow me to add todo items",
                  "timedOut": null,
                  "duration": 854,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// create 1st todo\ncy.get('.new-todo').type(TODO_ITEM_ONE).type('{enter}'); // make sure the 1st label contains the 1st todo text\ncy.get('.todo-list li').eq(0).find('label').should('contain', TODO_ITEM_ONE); // create 2nd todo\ncy.get('.new-todo').type(TODO_ITEM_TWO).type('{enter}'); // make sure the 2nd label contains the 2nd todo text\ncy.get('.todo-list li').eq(1).find('label').should('contain', TODO_ITEM_TWO);",
                  "err": {},
                  "uuid": "7a7c2f09-3aa4-4c82-bfc0-3acaf9d50cbc",
                  "parentUUID": "726c67ed-fdb9-4d81-8835-c59090d8ee70",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "adds items",
                  "fullTitle": "TodoMVC - React New Todo adds items",
                  "timedOut": null,
                  "duration": 782,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// create several todos then check the number of items in the list\ncy.get('.new-todo').type('todo A{enter}').type('todo B{enter}') // we can continue working with same element\n.type('todo C{enter}') // and keep adding new items\n.type('todo D{enter}');\ncy.get('.todo-list li').should('have.length', 4);",
                  "err": {},
                  "uuid": "26e62da0-b327-4229-97e2-d3fdce933564",
                  "parentUUID": "726c67ed-fdb9-4d81-8835-c59090d8ee70",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should clear text input field when an item is added",
                  "fullTitle": "TodoMVC - React New Todo should clear text input field when an item is added",
                  "timedOut": null,
                  "duration": 515,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.new-todo').type(TODO_ITEM_ONE).type('{enter}');\ncy.get('.new-todo').should('have.text', '');",
                  "err": {},
                  "uuid": "ff071cbe-c026-4dda-8818-012ea98bb1c9",
                  "parentUUID": "726c67ed-fdb9-4d81-8835-c59090d8ee70",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should append new items to the bottom of the list",
                  "fullTitle": "TodoMVC - React New Todo should append new items to the bottom of the list",
                  "timedOut": null,
                  "duration": 303,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// this is an example of a custom command\n// defined in cypress/support/commands.js\ncy.createDefaultTodos().as('todos'); // even though the text content is split across\n// multiple <span> and <strong> elements\n// `cy.contains` can verify this correctly\ncy.get('.todo-count').contains('3 items left');\ncy.get('@todos').eq(0).find('label').should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).find('label').should('contain', TODO_ITEM_TWO);\ncy.get('@todos').eq(2).find('label').should('contain', TODO_ITEM_THREE);",
                  "err": {
                    "message": "TypeError: cy.createDefaultTodos is not a function",
                    "estack": "TypeError: cy.createDefaultTodos is not a function\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:170:10)",
                    "diff": null
                  },
                  "uuid": "1cc525f0-c6d3-488d-8b8b-948b7106978e",
                  "parentUUID": "726c67ed-fdb9-4d81-8835-c59090d8ee70",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show #main and #footer when items added",
                  "fullTitle": "TodoMVC - React New Todo should show #main and #footer when items added",
                  "timedOut": null,
                  "duration": 241,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.createTodo(TODO_ITEM_ONE);\ncy.get('.main').should('be.visible');\ncy.get('.footer').should('be.visible');",
                  "err": {
                    "message": "TypeError: cy.createTodo is not a function",
                    "estack": "TypeError: cy.createTodo is not a function\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:180:10)",
                    "diff": null
                  },
                  "uuid": "b5168628-7417-46ab-b18e-c4293f132a30",
                  "parentUUID": "726c67ed-fdb9-4d81-8835-c59090d8ee70",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7a7c2f09-3aa4-4c82-bfc0-3acaf9d50cbc",
                "26e62da0-b327-4229-97e2-d3fdce933564",
                "ff071cbe-c026-4dda-8818-012ea98bb1c9"
              ],
              "failures": [
                "1cc525f0-c6d3-488d-8b8b-948b7106978e",
                "b5168628-7417-46ab-b18e-c4293f132a30"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2695,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "89942db8-a8f0-4f61-81ce-1056ab60ded7",
              "title": "Mark all as completed",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to mark all items as completed",
                  "fullTitle": "TodoMVC - React Mark all as completed should allow me to mark all items as completed",
                  "timedOut": null,
                  "duration": 187,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// complete all todos\n// we use 'check' instead of 'click'\n// because that indicates our intention much clearer\ncy.get('.toggle-all').check(); // get each todo li and ensure its class is 'completed'\ncy.get('@todos').eq(0).should('have.class', 'completed');\ncy.get('@todos').eq(1).should('have.class', 'completed');\ncy.get('@todos').eq(2).should('have.class', 'completed');",
                  "err": {
                    "message": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Mark all as completed`",
                    "estack": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Mark all as completed`\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:195:10)",
                    "diff": null
                  },
                  "uuid": "059b0f0e-2708-412a-8ae6-3c3dad2b3514",
                  "parentUUID": "89942db8-a8f0-4f61-81ce-1056ab60ded7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow me to clear the complete state of all items",
                  "fullTitle": "TodoMVC - React Mark all as completed should allow me to clear the complete state of all items",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// check and then immediately uncheck\ncy.get('.toggle-all').check().uncheck();\ncy.get('@todos').eq(0).should('not.have.class', 'completed');\ncy.get('@todos').eq(1).should('not.have.class', 'completed');\ncy.get('@todos').eq(2).should('not.have.class', 'completed');",
                  "err": {},
                  "uuid": "014ee7cb-508d-417f-861c-492f6f798588",
                  "parentUUID": "89942db8-a8f0-4f61-81ce-1056ab60ded7",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "complete all checkbox should update state when items are completed / cleared",
                  "fullTitle": "TodoMVC - React Mark all as completed complete all checkbox should update state when items are completed / cleared",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// alias the .toggle-all for reuse later\ncy.get('.toggle-all').as('toggleAll').check() // this assertion is silly here IMO but\n// it is what TodoMVC does\n.should('be.checked'); // alias the first todo and then click it\ncy.get('.todo-list li').eq(0).as('firstTodo').find('.toggle').uncheck(); // reference the .toggle-all element again\n// and make sure its not checked\ncy.get('@toggleAll').should('not.be.checked'); // reference the first todo again and now toggle it\ncy.get('@firstTodo').find('.toggle').check(); // assert the toggle all is checked again\ncy.get('@toggleAll').should('be.checked');",
                  "err": {},
                  "uuid": "e912d3f9-4aa8-4182-a1b7-c190ca264523",
                  "parentUUID": "89942db8-a8f0-4f61-81ce-1056ab60ded7",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "059b0f0e-2708-412a-8ae6-3c3dad2b3514"
              ],
              "pending": [],
              "skipped": [
                "014ee7cb-508d-417f-861c-492f6f798588",
                "e912d3f9-4aa8-4182-a1b7-c190ca264523"
              ],
              "duration": 187,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4db702ee-6194-4b25-bc33-1862265e21dc",
              "title": "Item",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to mark items as complete",
                  "fullTitle": "TodoMVC - React Item should allow me to mark items as complete",
                  "timedOut": null,
                  "duration": 326,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// we are aliasing the return value of\n// our custom command 'createTodo'\n//\n// the return value is the <li> in the <ul.todos-list>\ncy.createTodo(TODO_ITEM_ONE).as('firstTodo');\ncy.createTodo(TODO_ITEM_TWO).as('secondTodo');\ncy.get('@firstTodo').find('.toggle').check();\ncy.get('@firstTodo').should('have.class', 'completed');\ncy.get('@secondTodo').should('not.have.class', 'completed');\ncy.get('@secondTodo').find('.toggle').check();\ncy.get('@firstTodo').should('have.class', 'completed');\ncy.get('@secondTodo').should('have.class', 'completed');",
                  "err": {
                    "message": "TypeError: cy.createTodo is not a function",
                    "estack": "TypeError: cy.createTodo is not a function\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:238:10)",
                    "diff": null
                  },
                  "uuid": "154386bc-2f88-477c-a7fd-704bca8fa099",
                  "parentUUID": "4db702ee-6194-4b25-bc33-1862265e21dc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow me to un-mark items as complete",
                  "fullTitle": "TodoMVC - React Item should allow me to un-mark items as complete",
                  "timedOut": null,
                  "duration": 283,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.createTodo(TODO_ITEM_ONE).as('firstTodo');\ncy.createTodo(TODO_ITEM_TWO).as('secondTodo');\ncy.get('@firstTodo').find('.toggle').check();\ncy.get('@firstTodo').should('have.class', 'completed');\ncy.get('@secondTodo').should('not.have.class', 'completed');\ncy.get('@firstTodo').find('.toggle').uncheck();\ncy.get('@firstTodo').should('not.have.class', 'completed');\ncy.get('@secondTodo').should('not.have.class', 'completed');",
                  "err": {
                    "message": "TypeError: cy.createTodo is not a function",
                    "estack": "TypeError: cy.createTodo is not a function\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:248:10)",
                    "diff": null
                  },
                  "uuid": "88e3a41d-5bb3-49a2-a846-f1e75491935b",
                  "parentUUID": "4db702ee-6194-4b25-bc33-1862265e21dc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow me to edit an item",
                  "fullTitle": "TodoMVC - React Item should allow me to edit an item",
                  "timedOut": null,
                  "duration": 282,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.createDefaultTodos().as('todos');\ncy.get('@todos').eq(1).as('secondTodo') // TODO: fix this, dblclick should\n// have been issued to label\n.find('label').dblclick(); // clear out the inputs current value\n// and type a new value\ncy.get('@secondTodo').find('.edit').clear().type('buy some sausages').type('{enter}'); // explicitly assert about the text value\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@secondTodo').should('contain', 'buy some sausages');\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {
                    "message": "TypeError: cy.createDefaultTodos is not a function",
                    "estack": "TypeError: cy.createDefaultTodos is not a function\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:258:10)",
                    "diff": null
                  },
                  "uuid": "633620a8-d39c-4e30-ad6e-580cbc82cb25",
                  "parentUUID": "4db702ee-6194-4b25-bc33-1862265e21dc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "154386bc-2f88-477c-a7fd-704bca8fa099",
                "88e3a41d-5bb3-49a2-a846-f1e75491935b",
                "633620a8-d39c-4e30-ad6e-580cbc82cb25"
              ],
              "pending": [],
              "skipped": [],
              "duration": 891,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7c7392f5-63b5-423d-bec4-d9b248c284c3",
              "title": "Editing",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should hide other controls when editing",
                  "fullTitle": "TodoMVC - React Editing should hide other controls when editing",
                  "timedOut": null,
                  "duration": 164,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.toggle').should('not.be.visible');\ncy.get('@secondTodo').find('label').should('not.be.visible');",
                  "err": {
                    "message": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Editing`",
                    "estack": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Editing`\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:275:10)",
                    "diff": null
                  },
                  "uuid": "7ad3be1d-c8fc-4085-b17e-a008f0dfa582",
                  "parentUUID": "7c7392f5-63b5-423d-bec4-d9b248c284c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should save edits on blur",
                  "fullTitle": "TodoMVC - React Editing should save edits on blur",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('buy some sausages') // we can just send the blur event directly\n// to the input instead of having to click\n// on another button on the page. though you\n// could do that its just more mental work\n.blur();\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@secondTodo').should('contain', 'buy some sausages');\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "c38bd19b-7962-4ae3-aee7-1898358c44a6",
                  "parentUUID": "7c7392f5-63b5-423d-bec4-d9b248c284c3",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should trim entered text",
                  "fullTitle": "TodoMVC - React Editing should trim entered text",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('    buy some sausages    ').type('{enter}');\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@secondTodo').should('contain', 'buy some sausages');\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "577953a1-2e5f-4acd-907b-299e47f27ae8",
                  "parentUUID": "7c7392f5-63b5-423d-bec4-d9b248c284c3",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should remove the item if an empty text string was entered",
                  "fullTitle": "TodoMVC - React Editing should remove the item if an empty text string was entered",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('{enter}');\ncy.get('@todos').should('have.length', 2);",
                  "err": {},
                  "uuid": "0e7a8a8d-0d15-4c96-af63-73c24ed47960",
                  "parentUUID": "7c7392f5-63b5-423d-bec4-d9b248c284c3",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should cancel edits on escape",
                  "fullTitle": "TodoMVC - React Editing should cancel edits on escape",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('foo{esc}');\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).should('contain', TODO_ITEM_TWO);\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "db9e805b-1f9a-4a9d-9068-99d4ab3e2da0",
                  "parentUUID": "7c7392f5-63b5-423d-bec4-d9b248c284c3",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "7ad3be1d-c8fc-4085-b17e-a008f0dfa582"
              ],
              "pending": [],
              "skipped": [
                "c38bd19b-7962-4ae3-aee7-1898358c44a6",
                "577953a1-2e5f-4acd-907b-299e47f27ae8",
                "0e7a8a8d-0d15-4c96-af63-73c24ed47960",
                "db9e805b-1f9a-4a9d-9068-99d4ab3e2da0"
              ],
              "duration": 164,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "86fdd477-b5be-433c-9228-697e422b1b38",
              "title": "Counter",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display the current number of todo items",
                  "fullTitle": "TodoMVC - React Counter should display the current number of todo items",
                  "timedOut": null,
                  "duration": 312,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.createTodo(TODO_ITEM_ONE);\ncy.get('.todo-count').contains('1 item left');\ncy.createTodo(TODO_ITEM_TWO);\ncy.get('.todo-count').contains('2 items left');",
                  "err": {
                    "message": "TypeError: cy.createTodo is not a function",
                    "estack": "TypeError: cy.createTodo is not a function\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:315:10)",
                    "diff": null
                  },
                  "uuid": "76134155-5299-412c-b170-dfcfab653f89",
                  "parentUUID": "86fdd477-b5be-433c-9228-697e422b1b38",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "76134155-5299-412c-b170-dfcfab653f89"
              ],
              "pending": [],
              "skipped": [],
              "duration": 312,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "986ba099-33c8-49b3-b1a4-742a7919579e",
              "title": "Clear completed button",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display the correct text",
                  "fullTitle": "TodoMVC - React Clear completed button should display the correct text",
                  "timedOut": null,
                  "duration": 144,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(0).find('.toggle').check();\ncy.get('.clear-completed').contains('Clear completed');",
                  "err": {
                    "message": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Clear completed button`",
                    "estack": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Clear completed button`\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:323:10)",
                    "diff": null
                  },
                  "uuid": "6d156fb8-f15a-465c-85f6-7955cb8164c6",
                  "parentUUID": "986ba099-33c8-49b3-b1a4-742a7919579e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove completed items when clicked",
                  "fullTitle": "TodoMVC - React Clear completed button should remove completed items when clicked",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.clear-completed').click();\ncy.get('@todos').should('have.length', 2);\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "6aeca85e-38c6-49c8-a4b6-3301b89f7695",
                  "parentUUID": "986ba099-33c8-49b3-b1a4-742a7919579e",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should be hidden when there are no items that are completed",
                  "fullTitle": "TodoMVC - React Clear completed button should be hidden when there are no items that are completed",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.clear-completed').should('be.visible').click();\ncy.get('.clear-completed').should('not.exist');",
                  "err": {},
                  "uuid": "7f905528-5468-4406-ac35-e1935b28afab",
                  "parentUUID": "986ba099-33c8-49b3-b1a4-742a7919579e",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "6d156fb8-f15a-465c-85f6-7955cb8164c6"
              ],
              "pending": [],
              "skipped": [
                "6aeca85e-38c6-49c8-a4b6-3301b89f7695",
                "7f905528-5468-4406-ac35-e1935b28afab"
              ],
              "duration": 144,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bd5acb62-77bf-4680-b3eb-56d6e2745fc0",
              "title": "Persistence",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should persist its data",
                  "fullTitle": "TodoMVC - React Persistence should persist its data",
                  "timedOut": null,
                  "duration": 328,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// mimicking TodoMVC tests\n// by writing out this function\nfunction testState() {\n  cy.get('@firstTodo').should('contain', TODO_ITEM_ONE).and('have.class', 'completed');\n  cy.get('@secondTodo').should('contain', TODO_ITEM_TWO).and('not.have.class', 'completed');\n}\ncy.createTodo(TODO_ITEM_ONE).as('firstTodo');\ncy.createTodo(TODO_ITEM_TWO).as('secondTodo');\ncy.get('@firstTodo').find('.toggle').check().then(testState).reload().then(testState);",
                  "err": {
                    "message": "TypeError: cy.createTodo is not a function",
                    "estack": "TypeError: cy.createTodo is not a function\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:351:10)",
                    "diff": null
                  },
                  "uuid": "3b74262e-6180-4b7e-9ebe-566d6fdef18a",
                  "parentUUID": "bd5acb62-77bf-4680-b3eb-56d6e2745fc0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "3b74262e-6180-4b7e-9ebe-566d6fdef18a"
              ],
              "pending": [],
              "skipped": [],
              "duration": 328,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cc8cb24b-c22e-4191-b140-f6feae3e27bc",
              "title": "Routing",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to display active items",
                  "fullTitle": "TodoMVC - React Routing should allow me to display active items",
                  "timedOut": null,
                  "duration": 172,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Active').click();\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).should('contain', TODO_ITEM_THREE);",
                  "err": {
                    "message": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Routing`",
                    "estack": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Routing`\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:363:10)",
                    "diff": null
                  },
                  "uuid": "7edc6d45-1ef1-4136-9dae-71ce5b671a7a",
                  "parentUUID": "cc8cb24b-c22e-4191-b140-f6feae3e27bc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respect the back button",
                  "fullTitle": "TodoMVC - React Routing should respect the back button",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Active').click();\ncy.get('.filters').contains('Completed').click();\ncy.get('@todos').should('have.length', 1);\ncy.go('back');\ncy.get('@todos').should('have.length', 2);\ncy.go('back');\ncy.get('@todos').should('have.length', 3);",
                  "err": {},
                  "uuid": "23e60522-60ac-49fe-8c95-80f44cd4ad65",
                  "parentUUID": "cc8cb24b-c22e-4191-b140-f6feae3e27bc",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow me to display completed items",
                  "fullTitle": "TodoMVC - React Routing should allow me to display completed items",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Completed').click();\ncy.get('@todos').should('have.length', 1);",
                  "err": {},
                  "uuid": "b79f9b4e-59f0-4594-aceb-9085d6c2a723",
                  "parentUUID": "cc8cb24b-c22e-4191-b140-f6feae3e27bc",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow me to display all items",
                  "fullTitle": "TodoMVC - React Routing should allow me to display all items",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Active').click();\ncy.get('.filters').contains('Completed').click();\ncy.get('.filters').contains('All').click();\ncy.get('@todos').should('have.length', 3);",
                  "err": {},
                  "uuid": "ba2fd746-7b17-4d63-ab72-6b0bdbc1f78e",
                  "parentUUID": "cc8cb24b-c22e-4191-b140-f6feae3e27bc",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should highlight the currently applied filter",
                  "fullTitle": "TodoMVC - React Routing should highlight the currently applied filter",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// using a within here which will automatically scope\n// nested 'cy' queries to our parent element <ul.filters>\ncy.get('.filters').within(function () {\n  cy.contains('All').should('have.class', 'selected');\n  cy.contains('Active').click().should('have.class', 'selected');\n  cy.contains('Completed').click().should('have.class', 'selected');\n});",
                  "err": {},
                  "uuid": "b9fb76f8-c607-4ecd-b19d-0bdcb2b426bd",
                  "parentUUID": "cc8cb24b-c22e-4191-b140-f6feae3e27bc",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "7edc6d45-1ef1-4136-9dae-71ce5b671a7a"
              ],
              "pending": [],
              "skipped": [
                "23e60522-60ac-49fe-8c95-80f44cd4ad65",
                "b79f9b4e-59f0-4594-aceb-9085d6c2a723",
                "ba2fd746-7b17-4d63-ab72-6b0bdbc1f78e",
                "b9fb76f8-c607-4ecd-b19d-0bdcb2b426bd"
              ],
              "duration": 172,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/results/reports",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}