{
  "stats": {
    "suites": 10,
    "tests": 15,
    "passes": 0,
    "pending": 0,
    "failures": 15,
    "start": "2022-09-12T09:28:43.922Z",
    "end": "2022-09-12T09:29:05.028Z",
    "duration": 21106,
    "testsRegistered": 27,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 12,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "d0a67370-5cad-4b9d-bd57-d0a039a71881",
      "title": "",
      "fullFile": "cypress\\tests\\app.cy.js",
      "file": "cypress\\tests\\app.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "69a55bc2-772b-469b-aafa-d380d908a496",
          "title": "TodoMVC - React",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6cc964da-dbad-4a36-a680-421b5a00bcf9",
              "title": "Add todo test presentation",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should add 2 todos",
                  "fullTitle": "TodoMVC - React Add todo test presentation Should add 2 todos",
                  "timedOut": null,
                  "duration": 4347,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.new-todo').type('learn testing{enter}').type('be cool{enter}');\ncy.get('.todo-list li').should('have.length', 2);",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.",
                    "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:134:10)",
                    "diff": null
                  },
                  "uuid": "b0339fa9-c394-4b36-b095-556be3c246c6",
                  "parentUUID": "6cc964da-dbad-4a36-a680-421b5a00bcf9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "b0339fa9-c394-4b36-b095-556be3c246c6"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4347,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "be334a27-8ca3-486b-bb11-d38f1725bc91",
              "title": "New Todo",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to add todo items",
                  "fullTitle": "TodoMVC - React New Todo should allow me to add todo items",
                  "timedOut": null,
                  "duration": 4220,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// create 1st todo\ncy.get('.new-todo').type(TODO_ITEM_ONE).type('{enter}'); // make sure the 1st label contains the 1st todo text\ncy.get('.todo-list li').eq(0).find('label').should('contain', TODO_ITEM_ONE); // create 2nd todo\ncy.get('.new-todo').type(TODO_ITEM_TWO).type('{enter}'); // make sure the 2nd label contains the 2nd todo text\ncy.get('.todo-list li').eq(1).find('label').should('contain', TODO_ITEM_TWO);",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.",
                    "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:148:10)",
                    "diff": null
                  },
                  "uuid": "9cfb733c-169b-49a0-8535-9e7d19c8e453",
                  "parentUUID": "be334a27-8ca3-486b-bb11-d38f1725bc91",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "adds items",
                  "fullTitle": "TodoMVC - React New Todo adds items",
                  "timedOut": null,
                  "duration": 4214,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// create several todos then check the number of items in the list\ncy.get('.new-todo').type('todo A{enter}').type('todo B{enter}') // we can continue working with same element\n.type('todo C{enter}') // and keep adding new items\n.type('todo D{enter}');\ncy.get('.todo-list li').should('have.length', 4);",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.",
                    "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:158:10)",
                    "diff": null
                  },
                  "uuid": "1f12fd4a-015f-44ff-9e70-db1b7a52806f",
                  "parentUUID": "be334a27-8ca3-486b-bb11-d38f1725bc91",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should clear text input field when an item is added",
                  "fullTitle": "TodoMVC - React New Todo should clear text input field when an item is added",
                  "timedOut": null,
                  "duration": 4198,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.new-todo').type(TODO_ITEM_ONE).type('{enter}');\ncy.get('.new-todo').should('have.text', '');",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.",
                    "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:164:10)",
                    "diff": null
                  },
                  "uuid": "05cbd29c-22dc-4e6b-bb7d-c04d50436f1e",
                  "parentUUID": "be334a27-8ca3-486b-bb11-d38f1725bc91",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should append new items to the bottom of the list",
                  "fullTitle": "TodoMVC - React New Todo should append new items to the bottom of the list",
                  "timedOut": null,
                  "duration": 220,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// this is an example of a custom command\n// defined in cypress/support/commands.js\ncy.createDefaultTodos().as('todos'); // even though the text content is split across\n// multiple <span> and <strong> elements\n// `cy.contains` can verify this correctly\ncy.get('.todo-count').contains('3 items left');\ncy.get('@todos').eq(0).find('label').should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).find('label').should('contain', TODO_ITEM_TWO);\ncy.get('@todos').eq(2).find('label').should('contain', TODO_ITEM_THREE);",
                  "err": {
                    "message": "TypeError: cy.createDefaultTodos is not a function",
                    "estack": "TypeError: cy.createDefaultTodos is not a function\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:170:10)",
                    "diff": null
                  },
                  "uuid": "06d4c741-62d9-4fa4-ab0d-973cbc479360",
                  "parentUUID": "be334a27-8ca3-486b-bb11-d38f1725bc91",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show #main and #footer when items added",
                  "fullTitle": "TodoMVC - React New Todo should show #main and #footer when items added",
                  "timedOut": null,
                  "duration": 209,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.createTodo(TODO_ITEM_ONE);\ncy.get('.main').should('be.visible');\ncy.get('.footer').should('be.visible');",
                  "err": {
                    "message": "TypeError: cy.createTodo is not a function",
                    "estack": "TypeError: cy.createTodo is not a function\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:180:10)",
                    "diff": null
                  },
                  "uuid": "7e06aa74-4432-4d32-a82e-7745e8fa4991",
                  "parentUUID": "be334a27-8ca3-486b-bb11-d38f1725bc91",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "9cfb733c-169b-49a0-8535-9e7d19c8e453",
                "1f12fd4a-015f-44ff-9e70-db1b7a52806f",
                "05cbd29c-22dc-4e6b-bb7d-c04d50436f1e",
                "06d4c741-62d9-4fa4-ab0d-973cbc479360",
                "7e06aa74-4432-4d32-a82e-7745e8fa4991"
              ],
              "pending": [],
              "skipped": [],
              "duration": 13061,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "72757edd-9f37-489c-b8be-ebbc9707e265",
              "title": "Mark all as completed",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to mark all items as completed",
                  "fullTitle": "TodoMVC - React Mark all as completed should allow me to mark all items as completed",
                  "timedOut": null,
                  "duration": 125,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// complete all todos\n// we use 'check' instead of 'click'\n// because that indicates our intention much clearer\ncy.get('.toggle-all').check(); // get each todo li and ensure its class is 'completed'\ncy.get('@todos').eq(0).should('have.class', 'completed');\ncy.get('@todos').eq(1).should('have.class', 'completed');\ncy.get('@todos').eq(2).should('have.class', 'completed');",
                  "err": {
                    "message": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Mark all as completed`",
                    "estack": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Mark all as completed`\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:195:10)",
                    "diff": null
                  },
                  "uuid": "d9459529-bee1-4389-ba51-cb3411f253fd",
                  "parentUUID": "72757edd-9f37-489c-b8be-ebbc9707e265",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow me to clear the complete state of all items",
                  "fullTitle": "TodoMVC - React Mark all as completed should allow me to clear the complete state of all items",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// check and then immediately uncheck\ncy.get('.toggle-all').check().uncheck();\ncy.get('@todos').eq(0).should('not.have.class', 'completed');\ncy.get('@todos').eq(1).should('not.have.class', 'completed');\ncy.get('@todos').eq(2).should('not.have.class', 'completed');",
                  "err": {},
                  "uuid": "6d10ab31-137b-40fb-b360-de40883847d1",
                  "parentUUID": "72757edd-9f37-489c-b8be-ebbc9707e265",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "complete all checkbox should update state when items are completed / cleared",
                  "fullTitle": "TodoMVC - React Mark all as completed complete all checkbox should update state when items are completed / cleared",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// alias the .toggle-all for reuse later\ncy.get('.toggle-all').as('toggleAll').check() // this assertion is silly here IMO but\n// it is what TodoMVC does\n.should('be.checked'); // alias the first todo and then click it\ncy.get('.todo-list li').eq(0).as('firstTodo').find('.toggle').uncheck(); // reference the .toggle-all element again\n// and make sure its not checked\ncy.get('@toggleAll').should('not.be.checked'); // reference the first todo again and now toggle it\ncy.get('@firstTodo').find('.toggle').check(); // assert the toggle all is checked again\ncy.get('@toggleAll').should('be.checked');",
                  "err": {},
                  "uuid": "5117b3e5-a4f7-4c3e-8098-a6cfd6bc618e",
                  "parentUUID": "72757edd-9f37-489c-b8be-ebbc9707e265",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "d9459529-bee1-4389-ba51-cb3411f253fd"
              ],
              "pending": [],
              "skipped": [
                "6d10ab31-137b-40fb-b360-de40883847d1",
                "5117b3e5-a4f7-4c3e-8098-a6cfd6bc618e"
              ],
              "duration": 125,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "26bed891-1103-45a5-9bad-da92f5bdabf1",
              "title": "Item",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to mark items as complete",
                  "fullTitle": "TodoMVC - React Item should allow me to mark items as complete",
                  "timedOut": null,
                  "duration": 204,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// we are aliasing the return value of\n// our custom command 'createTodo'\n//\n// the return value is the <li> in the <ul.todos-list>\ncy.createTodo(TODO_ITEM_ONE).as('firstTodo');\ncy.createTodo(TODO_ITEM_TWO).as('secondTodo');\ncy.get('@firstTodo').find('.toggle').check();\ncy.get('@firstTodo').should('have.class', 'completed');\ncy.get('@secondTodo').should('not.have.class', 'completed');\ncy.get('@secondTodo').find('.toggle').check();\ncy.get('@firstTodo').should('have.class', 'completed');\ncy.get('@secondTodo').should('have.class', 'completed');",
                  "err": {
                    "message": "TypeError: cy.createTodo is not a function",
                    "estack": "TypeError: cy.createTodo is not a function\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:238:10)",
                    "diff": null
                  },
                  "uuid": "f75d5249-d6e6-4fe9-a5d6-d1abbedeed97",
                  "parentUUID": "26bed891-1103-45a5-9bad-da92f5bdabf1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow me to un-mark items as complete",
                  "fullTitle": "TodoMVC - React Item should allow me to un-mark items as complete",
                  "timedOut": null,
                  "duration": 206,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.createTodo(TODO_ITEM_ONE).as('firstTodo');\ncy.createTodo(TODO_ITEM_TWO).as('secondTodo');\ncy.get('@firstTodo').find('.toggle').check();\ncy.get('@firstTodo').should('have.class', 'completed');\ncy.get('@secondTodo').should('not.have.class', 'completed');\ncy.get('@firstTodo').find('.toggle').uncheck();\ncy.get('@firstTodo').should('not.have.class', 'completed');\ncy.get('@secondTodo').should('not.have.class', 'completed');",
                  "err": {
                    "message": "TypeError: cy.createTodo is not a function",
                    "estack": "TypeError: cy.createTodo is not a function\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:248:10)",
                    "diff": null
                  },
                  "uuid": "c202e2d5-6aa1-4c61-b3af-8c9c45c7e62d",
                  "parentUUID": "26bed891-1103-45a5-9bad-da92f5bdabf1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow me to edit an item",
                  "fullTitle": "TodoMVC - React Item should allow me to edit an item",
                  "timedOut": null,
                  "duration": 207,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.createDefaultTodos().as('todos');\ncy.get('@todos').eq(1).as('secondTodo') // TODO: fix this, dblclick should\n// have been issued to label\n.find('label').dblclick(); // clear out the inputs current value\n// and type a new value\ncy.get('@secondTodo').find('.edit').clear().type('buy some sausages').type('{enter}'); // explicitly assert about the text value\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@secondTodo').should('contain', 'buy some sausages');\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {
                    "message": "TypeError: cy.createDefaultTodos is not a function",
                    "estack": "TypeError: cy.createDefaultTodos is not a function\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:258:10)",
                    "diff": null
                  },
                  "uuid": "4fc366e2-8215-4e6d-b74b-1be4f0c92e64",
                  "parentUUID": "26bed891-1103-45a5-9bad-da92f5bdabf1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "f75d5249-d6e6-4fe9-a5d6-d1abbedeed97",
                "c202e2d5-6aa1-4c61-b3af-8c9c45c7e62d",
                "4fc366e2-8215-4e6d-b74b-1be4f0c92e64"
              ],
              "pending": [],
              "skipped": [],
              "duration": 617,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dfe91405-e896-4209-97b9-52829c6f6d9f",
              "title": "Editing",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should hide other controls when editing",
                  "fullTitle": "TodoMVC - React Editing should hide other controls when editing",
                  "timedOut": null,
                  "duration": 133,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.toggle').should('not.be.visible');\ncy.get('@secondTodo').find('label').should('not.be.visible');",
                  "err": {
                    "message": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Editing`",
                    "estack": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Editing`\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:275:10)",
                    "diff": null
                  },
                  "uuid": "fa2c8aff-5837-44f4-a82c-7511c6fb65ba",
                  "parentUUID": "dfe91405-e896-4209-97b9-52829c6f6d9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should save edits on blur",
                  "fullTitle": "TodoMVC - React Editing should save edits on blur",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('buy some sausages') // we can just send the blur event directly\n// to the input instead of having to click\n// on another button on the page. though you\n// could do that its just more mental work\n.blur();\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@secondTodo').should('contain', 'buy some sausages');\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "11e246cd-2d4c-4e0c-8ee9-2a869f78eb5a",
                  "parentUUID": "dfe91405-e896-4209-97b9-52829c6f6d9f",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should trim entered text",
                  "fullTitle": "TodoMVC - React Editing should trim entered text",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('    buy some sausages    ').type('{enter}');\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@secondTodo').should('contain', 'buy some sausages');\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "a33b981b-faef-4569-beed-45b6a1350550",
                  "parentUUID": "dfe91405-e896-4209-97b9-52829c6f6d9f",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should remove the item if an empty text string was entered",
                  "fullTitle": "TodoMVC - React Editing should remove the item if an empty text string was entered",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('{enter}');\ncy.get('@todos').should('have.length', 2);",
                  "err": {},
                  "uuid": "99993769-7a59-4767-8737-f4bd04adb465",
                  "parentUUID": "dfe91405-e896-4209-97b9-52829c6f6d9f",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should cancel edits on escape",
                  "fullTitle": "TodoMVC - React Editing should cancel edits on escape",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('foo{esc}');\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).should('contain', TODO_ITEM_TWO);\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "ba1fd95a-2f96-43f6-b231-fb9efcb4fa7f",
                  "parentUUID": "dfe91405-e896-4209-97b9-52829c6f6d9f",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "fa2c8aff-5837-44f4-a82c-7511c6fb65ba"
              ],
              "pending": [],
              "skipped": [
                "11e246cd-2d4c-4e0c-8ee9-2a869f78eb5a",
                "a33b981b-faef-4569-beed-45b6a1350550",
                "99993769-7a59-4767-8737-f4bd04adb465",
                "ba1fd95a-2f96-43f6-b231-fb9efcb4fa7f"
              ],
              "duration": 133,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c19e7f2b-68d2-4acc-bf26-e78440a101db",
              "title": "Counter",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display the current number of todo items",
                  "fullTitle": "TodoMVC - React Counter should display the current number of todo items",
                  "timedOut": null,
                  "duration": 220,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.createTodo(TODO_ITEM_ONE);\ncy.get('.todo-count').contains('1 item left');\ncy.createTodo(TODO_ITEM_TWO);\ncy.get('.todo-count').contains('2 items left');",
                  "err": {
                    "message": "TypeError: cy.createTodo is not a function",
                    "estack": "TypeError: cy.createTodo is not a function\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:315:10)",
                    "diff": null
                  },
                  "uuid": "43b3cc15-5ba6-4a5c-bb2d-9022d31ca0b6",
                  "parentUUID": "c19e7f2b-68d2-4acc-bf26-e78440a101db",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "43b3cc15-5ba6-4a5c-bb2d-9022d31ca0b6"
              ],
              "pending": [],
              "skipped": [],
              "duration": 220,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1be6f659-7dbb-436d-9333-56b17b702cb5",
              "title": "Clear completed button",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display the correct text",
                  "fullTitle": "TodoMVC - React Clear completed button should display the correct text",
                  "timedOut": null,
                  "duration": 130,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(0).find('.toggle').check();\ncy.get('.clear-completed').contains('Clear completed');",
                  "err": {
                    "message": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Clear completed button`",
                    "estack": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Clear completed button`\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:323:10)",
                    "diff": null
                  },
                  "uuid": "75b5a485-0141-477d-b088-e3b2e09faebb",
                  "parentUUID": "1be6f659-7dbb-436d-9333-56b17b702cb5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove completed items when clicked",
                  "fullTitle": "TodoMVC - React Clear completed button should remove completed items when clicked",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.clear-completed').click();\ncy.get('@todos').should('have.length', 2);\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "4ab107cc-e734-4c56-908a-dee065e2d0ca",
                  "parentUUID": "1be6f659-7dbb-436d-9333-56b17b702cb5",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should be hidden when there are no items that are completed",
                  "fullTitle": "TodoMVC - React Clear completed button should be hidden when there are no items that are completed",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.clear-completed').should('be.visible').click();\ncy.get('.clear-completed').should('not.exist');",
                  "err": {},
                  "uuid": "d77e8749-61de-4c64-ab70-d0370246dd8f",
                  "parentUUID": "1be6f659-7dbb-436d-9333-56b17b702cb5",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "75b5a485-0141-477d-b088-e3b2e09faebb"
              ],
              "pending": [],
              "skipped": [
                "4ab107cc-e734-4c56-908a-dee065e2d0ca",
                "d77e8749-61de-4c64-ab70-d0370246dd8f"
              ],
              "duration": 130,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0ef2f50d-ec1a-4043-9e6c-74f99c38457b",
              "title": "Persistence",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should persist its data",
                  "fullTitle": "TodoMVC - React Persistence should persist its data",
                  "timedOut": null,
                  "duration": 224,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// mimicking TodoMVC tests\n// by writing out this function\nfunction testState() {\n  cy.get('@firstTodo').should('contain', TODO_ITEM_ONE).and('have.class', 'completed');\n  cy.get('@secondTodo').should('contain', TODO_ITEM_TWO).and('not.have.class', 'completed');\n}\ncy.createTodo(TODO_ITEM_ONE).as('firstTodo');\ncy.createTodo(TODO_ITEM_TWO).as('secondTodo');\ncy.get('@firstTodo').find('.toggle').check().then(testState).reload().then(testState);",
                  "err": {
                    "message": "TypeError: cy.createTodo is not a function",
                    "estack": "TypeError: cy.createTodo is not a function\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:351:10)",
                    "diff": null
                  },
                  "uuid": "6e32ae9c-eb9c-42e1-9a49-eb0a84cc65d0",
                  "parentUUID": "0ef2f50d-ec1a-4043-9e6c-74f99c38457b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "6e32ae9c-eb9c-42e1-9a49-eb0a84cc65d0"
              ],
              "pending": [],
              "skipped": [],
              "duration": 224,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "10a6a35a-2721-4adc-a497-8c3d696fa333",
              "title": "Routing",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to display active items",
                  "fullTitle": "TodoMVC - React Routing should allow me to display active items",
                  "timedOut": null,
                  "duration": 127,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Active').click();\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).should('contain', TODO_ITEM_THREE);",
                  "err": {
                    "message": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Routing`",
                    "estack": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Routing`\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:363:10)",
                    "diff": null
                  },
                  "uuid": "d34e2592-5dd8-4dff-87e7-b62bc14563a8",
                  "parentUUID": "10a6a35a-2721-4adc-a497-8c3d696fa333",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respect the back button",
                  "fullTitle": "TodoMVC - React Routing should respect the back button",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Active').click();\ncy.get('.filters').contains('Completed').click();\ncy.get('@todos').should('have.length', 1);\ncy.go('back');\ncy.get('@todos').should('have.length', 2);\ncy.go('back');\ncy.get('@todos').should('have.length', 3);",
                  "err": {},
                  "uuid": "adba86c1-2051-40a0-92ed-f93b61e102e3",
                  "parentUUID": "10a6a35a-2721-4adc-a497-8c3d696fa333",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow me to display completed items",
                  "fullTitle": "TodoMVC - React Routing should allow me to display completed items",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Completed').click();\ncy.get('@todos').should('have.length', 1);",
                  "err": {},
                  "uuid": "955b5be2-0354-4f0b-b1d0-a32cc62fc5fe",
                  "parentUUID": "10a6a35a-2721-4adc-a497-8c3d696fa333",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow me to display all items",
                  "fullTitle": "TodoMVC - React Routing should allow me to display all items",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Active').click();\ncy.get('.filters').contains('Completed').click();\ncy.get('.filters').contains('All').click();\ncy.get('@todos').should('have.length', 3);",
                  "err": {},
                  "uuid": "997934ba-e331-45c2-9812-bea97e709479",
                  "parentUUID": "10a6a35a-2721-4adc-a497-8c3d696fa333",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should highlight the currently applied filter",
                  "fullTitle": "TodoMVC - React Routing should highlight the currently applied filter",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// using a within here which will automatically scope\n// nested 'cy' queries to our parent element <ul.filters>\ncy.get('.filters').within(function () {\n  cy.contains('All').should('have.class', 'selected');\n  cy.contains('Active').click().should('have.class', 'selected');\n  cy.contains('Completed').click().should('have.class', 'selected');\n});",
                  "err": {},
                  "uuid": "0256565e-e175-43c5-a6e8-d2a5338357d8",
                  "parentUUID": "10a6a35a-2721-4adc-a497-8c3d696fa333",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "d34e2592-5dd8-4dff-87e7-b62bc14563a8"
              ],
              "pending": [],
              "skipped": [
                "adba86c1-2051-40a0-92ed-f93b61e102e3",
                "955b5be2-0354-4f0b-b1d0-a32cc62fc5fe",
                "997934ba-e331-45c2-9812-bea97e709479",
                "0256565e-e175-43c5-a6e8-d2a5338357d8"
              ],
              "duration": 127,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/results/reports",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}