{
  "stats": {
    "suites": 10,
    "tests": 15,
    "passes": 4,
    "pending": 0,
    "failures": 11,
    "start": "2022-09-12T10:44:05.054Z",
    "end": "2022-09-12T10:44:13.245Z",
    "duration": 8191,
    "testsRegistered": 27,
    "passPercent": 14.814814814814813,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 12,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "9aae309a-6562-4a2c-80d2-db186e09959b",
      "title": "",
      "fullFile": "cypress\\tests\\app.cy.js",
      "file": "cypress\\tests\\app.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "654b26ab-3eda-42bb-be60-7801c99f31be",
          "title": "TodoMVC - React",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "78f80068-368b-480e-8f64-3d3e85b0827b",
              "title": "Add todo test presentation",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should add 2 todos",
                  "fullTitle": "TodoMVC - React Add todo test presentation Should add 2 todos",
                  "timedOut": null,
                  "duration": 679,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.new-todo').type('learn testing{enter}').type('be cool{enter}');\ncy.get('.todo-list li').should('have.length', 2);",
                  "err": {},
                  "uuid": "2775113a-d092-4450-80d1-284ba4be743f",
                  "parentUUID": "78f80068-368b-480e-8f64-3d3e85b0827b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2775113a-d092-4450-80d1-284ba4be743f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 679,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5410eaf9-e8ec-47a3-9521-9c5f245b4deb",
              "title": "New Todo",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to add todo items",
                  "fullTitle": "TodoMVC - React New Todo should allow me to add todo items",
                  "timedOut": null,
                  "duration": 869,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// create 1st todo\ncy.get('.new-todo').type(TODO_ITEM_ONE).type('{enter}'); // make sure the 1st label contains the 1st todo text\ncy.get('.todo-list li').eq(0).find('label').should('contain', TODO_ITEM_ONE); // create 2nd todo\ncy.get('.new-todo').type(TODO_ITEM_TWO).type('{enter}'); // make sure the 2nd label contains the 2nd todo text\ncy.get('.todo-list li').eq(1).find('label').should('contain', TODO_ITEM_TWO);",
                  "err": {},
                  "uuid": "1f19b901-bdcc-4f1e-a148-017326546422",
                  "parentUUID": "5410eaf9-e8ec-47a3-9521-9c5f245b4deb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "adds items",
                  "fullTitle": "TodoMVC - React New Todo adds items",
                  "timedOut": null,
                  "duration": 800,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// create several todos then check the number of items in the list\ncy.get('.new-todo').type('todo A{enter}').type('todo B{enter}') // we can continue working with same element\n.type('todo C{enter}') // and keep adding new items\n.type('todo D{enter}');\ncy.get('.todo-list li').should('have.length', 4);",
                  "err": {},
                  "uuid": "c819dade-4077-45bf-bdf0-e9ebcb41787e",
                  "parentUUID": "5410eaf9-e8ec-47a3-9521-9c5f245b4deb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should clear text input field when an item is added",
                  "fullTitle": "TodoMVC - React New Todo should clear text input field when an item is added",
                  "timedOut": null,
                  "duration": 567,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.new-todo').type(TODO_ITEM_ONE).type('{enter}');\ncy.get('.new-todo').should('have.text', '');",
                  "err": {},
                  "uuid": "cecd6fd0-a856-43a4-aa41-d6c114b585dc",
                  "parentUUID": "5410eaf9-e8ec-47a3-9521-9c5f245b4deb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should append new items to the bottom of the list",
                  "fullTitle": "TodoMVC - React New Todo should append new items to the bottom of the list",
                  "timedOut": null,
                  "duration": 353,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// this is an example of a custom command\n// defined in cypress/support/commands.js\ncy.createDefaultTodos().as('todos'); // even though the text content is split across\n// multiple <span> and <strong> elements\n// `cy.contains` can verify this correctly\ncy.get('.todo-count').contains('3 items left');\ncy.get('@todos').eq(0).find('label').should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).find('label').should('contain', TODO_ITEM_TWO);\ncy.get('@todos').eq(2).find('label').should('contain', TODO_ITEM_THREE);",
                  "err": {
                    "message": "TypeError: cy.createDefaultTodos is not a function",
                    "estack": "TypeError: cy.createDefaultTodos is not a function\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:170:10)",
                    "diff": null
                  },
                  "uuid": "36e45dc2-23af-4a1a-aadf-5e8966766886",
                  "parentUUID": "5410eaf9-e8ec-47a3-9521-9c5f245b4deb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show #main and #footer when items added",
                  "fullTitle": "TodoMVC - React New Todo should show #main and #footer when items added",
                  "timedOut": null,
                  "duration": 280,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.createTodo(TODO_ITEM_ONE);\ncy.get('.main').should('be.visible');\ncy.get('.footer').should('be.visible');",
                  "err": {
                    "message": "TypeError: cy.createTodo is not a function",
                    "estack": "TypeError: cy.createTodo is not a function\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:180:10)",
                    "diff": null
                  },
                  "uuid": "c2012cb3-700c-4912-b42e-d18f2d227767",
                  "parentUUID": "5410eaf9-e8ec-47a3-9521-9c5f245b4deb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1f19b901-bdcc-4f1e-a148-017326546422",
                "c819dade-4077-45bf-bdf0-e9ebcb41787e",
                "cecd6fd0-a856-43a4-aa41-d6c114b585dc"
              ],
              "failures": [
                "36e45dc2-23af-4a1a-aadf-5e8966766886",
                "c2012cb3-700c-4912-b42e-d18f2d227767"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2869,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "21e8310d-059c-4b3e-aa21-2a0d4caf3ee1",
              "title": "Mark all as completed",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to mark all items as completed",
                  "fullTitle": "TodoMVC - React Mark all as completed should allow me to mark all items as completed",
                  "timedOut": null,
                  "duration": 134,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// complete all todos\n// we use 'check' instead of 'click'\n// because that indicates our intention much clearer\ncy.get('.toggle-all').check(); // get each todo li and ensure its class is 'completed'\ncy.get('@todos').eq(0).should('have.class', 'completed');\ncy.get('@todos').eq(1).should('have.class', 'completed');\ncy.get('@todos').eq(2).should('have.class', 'completed');",
                  "err": {
                    "message": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Mark all as completed`",
                    "estack": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Mark all as completed`\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:195:10)",
                    "diff": null
                  },
                  "uuid": "7b5c5c48-436a-43ec-b59f-d0efe563266a",
                  "parentUUID": "21e8310d-059c-4b3e-aa21-2a0d4caf3ee1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow me to clear the complete state of all items",
                  "fullTitle": "TodoMVC - React Mark all as completed should allow me to clear the complete state of all items",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// check and then immediately uncheck\ncy.get('.toggle-all').check().uncheck();\ncy.get('@todos').eq(0).should('not.have.class', 'completed');\ncy.get('@todos').eq(1).should('not.have.class', 'completed');\ncy.get('@todos').eq(2).should('not.have.class', 'completed');",
                  "err": {},
                  "uuid": "2dcf5e43-348c-4a4a-9dcc-aae561abe004",
                  "parentUUID": "21e8310d-059c-4b3e-aa21-2a0d4caf3ee1",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "complete all checkbox should update state when items are completed / cleared",
                  "fullTitle": "TodoMVC - React Mark all as completed complete all checkbox should update state when items are completed / cleared",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// alias the .toggle-all for reuse later\ncy.get('.toggle-all').as('toggleAll').check() // this assertion is silly here IMO but\n// it is what TodoMVC does\n.should('be.checked'); // alias the first todo and then click it\ncy.get('.todo-list li').eq(0).as('firstTodo').find('.toggle').uncheck(); // reference the .toggle-all element again\n// and make sure its not checked\ncy.get('@toggleAll').should('not.be.checked'); // reference the first todo again and now toggle it\ncy.get('@firstTodo').find('.toggle').check(); // assert the toggle all is checked again\ncy.get('@toggleAll').should('be.checked');",
                  "err": {},
                  "uuid": "7d8aa957-dbce-4f2a-b436-b36ca8c9b6fc",
                  "parentUUID": "21e8310d-059c-4b3e-aa21-2a0d4caf3ee1",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "7b5c5c48-436a-43ec-b59f-d0efe563266a"
              ],
              "pending": [],
              "skipped": [
                "2dcf5e43-348c-4a4a-9dcc-aae561abe004",
                "7d8aa957-dbce-4f2a-b436-b36ca8c9b6fc"
              ],
              "duration": 134,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0ae11bda-8039-4dde-9fd8-aff67ad7c20b",
              "title": "Item",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to mark items as complete",
                  "fullTitle": "TodoMVC - React Item should allow me to mark items as complete",
                  "timedOut": null,
                  "duration": 329,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// we are aliasing the return value of\n// our custom command 'createTodo'\n//\n// the return value is the <li> in the <ul.todos-list>\ncy.createTodo(TODO_ITEM_ONE).as('firstTodo');\ncy.createTodo(TODO_ITEM_TWO).as('secondTodo');\ncy.get('@firstTodo').find('.toggle').check();\ncy.get('@firstTodo').should('have.class', 'completed');\ncy.get('@secondTodo').should('not.have.class', 'completed');\ncy.get('@secondTodo').find('.toggle').check();\ncy.get('@firstTodo').should('have.class', 'completed');\ncy.get('@secondTodo').should('have.class', 'completed');",
                  "err": {
                    "message": "TypeError: cy.createTodo is not a function",
                    "estack": "TypeError: cy.createTodo is not a function\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:238:10)",
                    "diff": null
                  },
                  "uuid": "5cb4cbc6-393d-460d-8308-f8a9f78df9d6",
                  "parentUUID": "0ae11bda-8039-4dde-9fd8-aff67ad7c20b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow me to un-mark items as complete",
                  "fullTitle": "TodoMVC - React Item should allow me to un-mark items as complete",
                  "timedOut": null,
                  "duration": 297,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.createTodo(TODO_ITEM_ONE).as('firstTodo');\ncy.createTodo(TODO_ITEM_TWO).as('secondTodo');\ncy.get('@firstTodo').find('.toggle').check();\ncy.get('@firstTodo').should('have.class', 'completed');\ncy.get('@secondTodo').should('not.have.class', 'completed');\ncy.get('@firstTodo').find('.toggle').uncheck();\ncy.get('@firstTodo').should('not.have.class', 'completed');\ncy.get('@secondTodo').should('not.have.class', 'completed');",
                  "err": {
                    "message": "TypeError: cy.createTodo is not a function",
                    "estack": "TypeError: cy.createTodo is not a function\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:248:10)",
                    "diff": null
                  },
                  "uuid": "38ee049d-728d-480c-b20e-3d46f808271b",
                  "parentUUID": "0ae11bda-8039-4dde-9fd8-aff67ad7c20b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow me to edit an item",
                  "fullTitle": "TodoMVC - React Item should allow me to edit an item",
                  "timedOut": null,
                  "duration": 298,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.createDefaultTodos().as('todos');\ncy.get('@todos').eq(1).as('secondTodo') // TODO: fix this, dblclick should\n// have been issued to label\n.find('label').dblclick(); // clear out the inputs current value\n// and type a new value\ncy.get('@secondTodo').find('.edit').clear().type('buy some sausages').type('{enter}'); // explicitly assert about the text value\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@secondTodo').should('contain', 'buy some sausages');\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {
                    "message": "TypeError: cy.createDefaultTodos is not a function",
                    "estack": "TypeError: cy.createDefaultTodos is not a function\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:258:10)",
                    "diff": null
                  },
                  "uuid": "71519668-df28-4577-a87c-e9e2287195c4",
                  "parentUUID": "0ae11bda-8039-4dde-9fd8-aff67ad7c20b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "5cb4cbc6-393d-460d-8308-f8a9f78df9d6",
                "38ee049d-728d-480c-b20e-3d46f808271b",
                "71519668-df28-4577-a87c-e9e2287195c4"
              ],
              "pending": [],
              "skipped": [],
              "duration": 924,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "460c5d1b-2f99-412e-8614-d325c4f36dc6",
              "title": "Editing",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should hide other controls when editing",
                  "fullTitle": "TodoMVC - React Editing should hide other controls when editing",
                  "timedOut": null,
                  "duration": 164,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.toggle').should('not.be.visible');\ncy.get('@secondTodo').find('label').should('not.be.visible');",
                  "err": {
                    "message": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Editing`",
                    "estack": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Editing`\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:275:10)",
                    "diff": null
                  },
                  "uuid": "4c6898fc-6a7c-41e9-9e5f-3e72d13c2794",
                  "parentUUID": "460c5d1b-2f99-412e-8614-d325c4f36dc6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should save edits on blur",
                  "fullTitle": "TodoMVC - React Editing should save edits on blur",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('buy some sausages') // we can just send the blur event directly\n// to the input instead of having to click\n// on another button on the page. though you\n// could do that its just more mental work\n.blur();\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@secondTodo').should('contain', 'buy some sausages');\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "57ca6d9a-27c6-4cb3-9dbd-ea3aa001e9af",
                  "parentUUID": "460c5d1b-2f99-412e-8614-d325c4f36dc6",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should trim entered text",
                  "fullTitle": "TodoMVC - React Editing should trim entered text",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('    buy some sausages    ').type('{enter}');\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@secondTodo').should('contain', 'buy some sausages');\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "49126411-2291-460a-a1fd-db6955631383",
                  "parentUUID": "460c5d1b-2f99-412e-8614-d325c4f36dc6",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should remove the item if an empty text string was entered",
                  "fullTitle": "TodoMVC - React Editing should remove the item if an empty text string was entered",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('{enter}');\ncy.get('@todos').should('have.length', 2);",
                  "err": {},
                  "uuid": "e984dd33-4094-42bb-87b1-72c7a87ee17e",
                  "parentUUID": "460c5d1b-2f99-412e-8614-d325c4f36dc6",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should cancel edits on escape",
                  "fullTitle": "TodoMVC - React Editing should cancel edits on escape",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('foo{esc}');\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).should('contain', TODO_ITEM_TWO);\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "e6db3f01-6fad-4e56-8c8c-8bad3742518f",
                  "parentUUID": "460c5d1b-2f99-412e-8614-d325c4f36dc6",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "4c6898fc-6a7c-41e9-9e5f-3e72d13c2794"
              ],
              "pending": [],
              "skipped": [
                "57ca6d9a-27c6-4cb3-9dbd-ea3aa001e9af",
                "49126411-2291-460a-a1fd-db6955631383",
                "e984dd33-4094-42bb-87b1-72c7a87ee17e",
                "e6db3f01-6fad-4e56-8c8c-8bad3742518f"
              ],
              "duration": 164,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bf4ae3d4-8e81-408a-bbcb-a785bf015d6d",
              "title": "Counter",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display the current number of todo items",
                  "fullTitle": "TodoMVC - React Counter should display the current number of todo items",
                  "timedOut": null,
                  "duration": 305,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.createTodo(TODO_ITEM_ONE);\ncy.get('.todo-count').contains('1 item left');\ncy.createTodo(TODO_ITEM_TWO);\ncy.get('.todo-count').contains('2 items left');",
                  "err": {
                    "message": "TypeError: cy.createTodo is not a function",
                    "estack": "TypeError: cy.createTodo is not a function\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:315:10)",
                    "diff": null
                  },
                  "uuid": "d5911b94-13df-4935-85b3-b95cd74b31eb",
                  "parentUUID": "bf4ae3d4-8e81-408a-bbcb-a785bf015d6d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "d5911b94-13df-4935-85b3-b95cd74b31eb"
              ],
              "pending": [],
              "skipped": [],
              "duration": 305,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0c69b830-5bb8-4cf7-a7fe-38a58ccf169e",
              "title": "Clear completed button",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display the correct text",
                  "fullTitle": "TodoMVC - React Clear completed button should display the correct text",
                  "timedOut": null,
                  "duration": 169,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(0).find('.toggle').check();\ncy.get('.clear-completed').contains('Clear completed');",
                  "err": {
                    "message": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Clear completed button`",
                    "estack": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Clear completed button`\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:323:10)",
                    "diff": null
                  },
                  "uuid": "ed9da1bb-6c5b-4d6c-8fb4-c9c17679c5dc",
                  "parentUUID": "0c69b830-5bb8-4cf7-a7fe-38a58ccf169e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove completed items when clicked",
                  "fullTitle": "TodoMVC - React Clear completed button should remove completed items when clicked",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.clear-completed').click();\ncy.get('@todos').should('have.length', 2);\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "b74caf2b-7e43-4bed-ba71-b4416921b884",
                  "parentUUID": "0c69b830-5bb8-4cf7-a7fe-38a58ccf169e",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should be hidden when there are no items that are completed",
                  "fullTitle": "TodoMVC - React Clear completed button should be hidden when there are no items that are completed",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.clear-completed').should('be.visible').click();\ncy.get('.clear-completed').should('not.exist');",
                  "err": {},
                  "uuid": "aa239ba5-eec8-4abc-b8b1-93bc674ef491",
                  "parentUUID": "0c69b830-5bb8-4cf7-a7fe-38a58ccf169e",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "ed9da1bb-6c5b-4d6c-8fb4-c9c17679c5dc"
              ],
              "pending": [],
              "skipped": [
                "b74caf2b-7e43-4bed-ba71-b4416921b884",
                "aa239ba5-eec8-4abc-b8b1-93bc674ef491"
              ],
              "duration": 169,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d5e206a6-26d1-4ce0-a3a9-c0bb1f1c812f",
              "title": "Persistence",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should persist its data",
                  "fullTitle": "TodoMVC - React Persistence should persist its data",
                  "timedOut": null,
                  "duration": 330,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// mimicking TodoMVC tests\n// by writing out this function\nfunction testState() {\n  cy.get('@firstTodo').should('contain', TODO_ITEM_ONE).and('have.class', 'completed');\n  cy.get('@secondTodo').should('contain', TODO_ITEM_TWO).and('not.have.class', 'completed');\n}\ncy.createTodo(TODO_ITEM_ONE).as('firstTodo');\ncy.createTodo(TODO_ITEM_TWO).as('secondTodo');\ncy.get('@firstTodo').find('.toggle').check().then(testState).reload().then(testState);",
                  "err": {
                    "message": "TypeError: cy.createTodo is not a function",
                    "estack": "TypeError: cy.createTodo is not a function\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:351:10)",
                    "diff": null
                  },
                  "uuid": "743b429a-58d9-4772-8337-fb16d80d7f77",
                  "parentUUID": "d5e206a6-26d1-4ce0-a3a9-c0bb1f1c812f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "743b429a-58d9-4772-8337-fb16d80d7f77"
              ],
              "pending": [],
              "skipped": [],
              "duration": 330,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "33f9ad5d-f0f8-42b4-be1f-7ceafea155ad",
              "title": "Routing",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to display active items",
                  "fullTitle": "TodoMVC - React Routing should allow me to display active items",
                  "timedOut": null,
                  "duration": 155,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Active').click();\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).should('contain', TODO_ITEM_THREE);",
                  "err": {
                    "message": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Routing`",
                    "estack": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Routing`\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:363:10)",
                    "diff": null
                  },
                  "uuid": "6b156538-1f68-4240-9491-ebf9360e9c98",
                  "parentUUID": "33f9ad5d-f0f8-42b4-be1f-7ceafea155ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respect the back button",
                  "fullTitle": "TodoMVC - React Routing should respect the back button",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Active').click();\ncy.get('.filters').contains('Completed').click();\ncy.get('@todos').should('have.length', 1);\ncy.go('back');\ncy.get('@todos').should('have.length', 2);\ncy.go('back');\ncy.get('@todos').should('have.length', 3);",
                  "err": {},
                  "uuid": "e519eea5-d1d0-40a4-9a96-5104a1760dc5",
                  "parentUUID": "33f9ad5d-f0f8-42b4-be1f-7ceafea155ad",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow me to display completed items",
                  "fullTitle": "TodoMVC - React Routing should allow me to display completed items",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Completed').click();\ncy.get('@todos').should('have.length', 1);",
                  "err": {},
                  "uuid": "ea802be1-ca48-4be4-8075-0a55a66fc265",
                  "parentUUID": "33f9ad5d-f0f8-42b4-be1f-7ceafea155ad",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow me to display all items",
                  "fullTitle": "TodoMVC - React Routing should allow me to display all items",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Active').click();\ncy.get('.filters').contains('Completed').click();\ncy.get('.filters').contains('All').click();\ncy.get('@todos').should('have.length', 3);",
                  "err": {},
                  "uuid": "2c66528e-858a-4e7f-aee0-482f4304d14a",
                  "parentUUID": "33f9ad5d-f0f8-42b4-be1f-7ceafea155ad",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should highlight the currently applied filter",
                  "fullTitle": "TodoMVC - React Routing should highlight the currently applied filter",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// using a within here which will automatically scope\n// nested 'cy' queries to our parent element <ul.filters>\ncy.get('.filters').within(function () {\n  cy.contains('All').should('have.class', 'selected');\n  cy.contains('Active').click().should('have.class', 'selected');\n  cy.contains('Completed').click().should('have.class', 'selected');\n});",
                  "err": {},
                  "uuid": "4b8add39-5b21-433c-84da-2d101432cc0c",
                  "parentUUID": "33f9ad5d-f0f8-42b4-be1f-7ceafea155ad",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "6b156538-1f68-4240-9491-ebf9360e9c98"
              ],
              "pending": [],
              "skipped": [
                "e519eea5-d1d0-40a4-9a96-5104a1760dc5",
                "ea802be1-ca48-4be4-8075-0a55a66fc265",
                "2c66528e-858a-4e7f-aee0-482f4304d14a",
                "4b8add39-5b21-433c-84da-2d101432cc0c"
              ],
              "duration": 155,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/results/reports",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}