{
  "stats": {
    "suites": 2,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2022-09-12T09:28:12.313Z",
    "end": "2022-09-12T09:28:12.599Z",
    "duration": 286,
    "testsRegistered": 27,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 26,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "986c2bdd-7a96-404a-bd5e-9616bbffc1ab",
      "title": "",
      "fullFile": "cypress\\tests\\app.cy.js",
      "file": "cypress\\tests\\app.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "abb60ab9-1e40-487f-8ba0-70c98865c2cc",
          "title": "TodoMVC - React",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8d7506ea-7aae-4d47-8a99-12249fbd4ed8",
              "title": "Add todo test presentation",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should add 2 todos",
                  "fullTitle": "TodoMVC - React Add todo test presentation Should add 2 todos",
                  "timedOut": null,
                  "duration": 226,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.new-todo').type('learn testing{enter}').type('be cool{enter}');\ncy.get('.todo-list li').should('have.length', 2);",
                  "err": {
                    "message": "CypressError: `cy.visit()` failed trying to load:\n\nhttp://127.0.0.1:8887/\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `TodoMVC - React`",
                    "estack": "CypressError: `cy.visit()` failed trying to load:\n\nhttp://127.0.0.1:8887/\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `TodoMVC - React`\n    at https://testerzy.pl/__cypress/runner/cypress_runner.js:142094:84\n    at visitFailedByErr (https://testerzy.pl/__cypress/runner/cypress_runner.js:141413:12)\n    at https://testerzy.pl/__cypress/runner/cypress_runner.js:142074:13\n    at tryCatcher (https://testerzy.pl/__cypress/runner/cypress_runner.js:11318:23)\n    at Promise._settlePromiseFromHandler (https://testerzy.pl/__cypress/runner/cypress_runner.js:9253:31)\n    at Promise._settlePromise (https://testerzy.pl/__cypress/runner/cypress_runner.js:9310:18)\n    at Promise._settlePromise0 (https://testerzy.pl/__cypress/runner/cypress_runner.js:9355:10)\n    at Promise._settlePromises (https://testerzy.pl/__cypress/runner/cypress_runner.js:9431:18)\n    at _drainQueueStep (https://testerzy.pl/__cypress/runner/cypress_runner.js:6025:12)\n    at _drainQueue (https://testerzy.pl/__cypress/runner/cypress_runner.js:6018:9)\n    at ../../node_modules/bluebird/js/release/async.js.Async._drainQueues (https://testerzy.pl/__cypress/runner/cypress_runner.js:6034:5)\n    at Async.drainQueues (https://testerzy.pl/__cypress/runner/cypress_runner.js:5904:14)\nFrom Your Spec Code:\n    at Context.eval (https://testerzy.pl/__cypress/tests?p=cypress\\tests\\app.cy.js:121:8)",
                    "diff": null
                  },
                  "uuid": "9d28e1bc-b435-4ecf-b99d-3253d4aac9e3",
                  "parentUUID": "8d7506ea-7aae-4d47-8a99-12249fbd4ed8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "9d28e1bc-b435-4ecf-b99d-3253d4aac9e3"
              ],
              "pending": [],
              "skipped": [],
              "duration": 226,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "695626e1-38f2-40b3-bd4c-b49a1bb1ac0b",
              "title": "New Todo",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to add todo items",
                  "fullTitle": "TodoMVC - React New Todo should allow me to add todo items",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// create 1st todo\ncy.get('.new-todo').type(TODO_ITEM_ONE).type('{enter}'); // make sure the 1st label contains the 1st todo text\ncy.get('.todo-list li').eq(0).find('label').should('contain', TODO_ITEM_ONE); // create 2nd todo\ncy.get('.new-todo').type(TODO_ITEM_TWO).type('{enter}'); // make sure the 2nd label contains the 2nd todo text\ncy.get('.todo-list li').eq(1).find('label').should('contain', TODO_ITEM_TWO);",
                  "err": {},
                  "uuid": "8e910b98-ebb7-462e-8da9-66c1770a5361",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "adds items",
                  "fullTitle": "TodoMVC - React New Todo adds items",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// create several todos then check the number of items in the list\ncy.get('.new-todo').type('todo A{enter}').type('todo B{enter}') // we can continue working with same element\n.type('todo C{enter}') // and keep adding new items\n.type('todo D{enter}');\ncy.get('.todo-list li').should('have.length', 4);",
                  "err": {},
                  "uuid": "249640ab-18de-49f7-a396-9ff310a03fdf",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should clear text input field when an item is added",
                  "fullTitle": "TodoMVC - React New Todo should clear text input field when an item is added",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.new-todo').type(TODO_ITEM_ONE).type('{enter}');\ncy.get('.new-todo').should('have.text', '');",
                  "err": {},
                  "uuid": "0cc59bd6-d51f-4a96-a5f9-c9ea1e0ee6db",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should append new items to the bottom of the list",
                  "fullTitle": "TodoMVC - React New Todo should append new items to the bottom of the list",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// this is an example of a custom command\n// defined in cypress/support/commands.js\ncy.createDefaultTodos().as('todos'); // even though the text content is split across\n// multiple <span> and <strong> elements\n// `cy.contains` can verify this correctly\ncy.get('.todo-count').contains('3 items left');\ncy.get('@todos').eq(0).find('label').should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).find('label').should('contain', TODO_ITEM_TWO);\ncy.get('@todos').eq(2).find('label').should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "2313efde-a362-482b-8998-c48c8feedcca",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should show #main and #footer when items added",
                  "fullTitle": "TodoMVC - React New Todo should show #main and #footer when items added",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.createTodo(TODO_ITEM_ONE);\ncy.get('.main').should('be.visible');\ncy.get('.footer').should('be.visible');",
                  "err": {},
                  "uuid": "f2f1f5d0-0193-4471-8ed0-236928faf7cf",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "8e910b98-ebb7-462e-8da9-66c1770a5361",
                "249640ab-18de-49f7-a396-9ff310a03fdf",
                "0cc59bd6-d51f-4a96-a5f9-c9ea1e0ee6db",
                "2313efde-a362-482b-8998-c48c8feedcca",
                "f2f1f5d0-0193-4471-8ed0-236928faf7cf"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6cf15892-6041-4270-8403-15e715cddf1f",
              "title": "Mark all as completed",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to mark all items as completed",
                  "fullTitle": "TodoMVC - React Mark all as completed should allow me to mark all items as completed",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// complete all todos\n// we use 'check' instead of 'click'\n// because that indicates our intention much clearer\ncy.get('.toggle-all').check(); // get each todo li and ensure its class is 'completed'\ncy.get('@todos').eq(0).should('have.class', 'completed');\ncy.get('@todos').eq(1).should('have.class', 'completed');\ncy.get('@todos').eq(2).should('have.class', 'completed');",
                  "err": {},
                  "uuid": "5b75e9ff-232f-4c9b-8c43-e8176f33f047",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow me to clear the complete state of all items",
                  "fullTitle": "TodoMVC - React Mark all as completed should allow me to clear the complete state of all items",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// check and then immediately uncheck\ncy.get('.toggle-all').check().uncheck();\ncy.get('@todos').eq(0).should('not.have.class', 'completed');\ncy.get('@todos').eq(1).should('not.have.class', 'completed');\ncy.get('@todos').eq(2).should('not.have.class', 'completed');",
                  "err": {},
                  "uuid": "bdb355c4-badb-4353-b207-80ddfd2bc4c0",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "complete all checkbox should update state when items are completed / cleared",
                  "fullTitle": "TodoMVC - React Mark all as completed complete all checkbox should update state when items are completed / cleared",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// alias the .toggle-all for reuse later\ncy.get('.toggle-all').as('toggleAll').check() // this assertion is silly here IMO but\n// it is what TodoMVC does\n.should('be.checked'); // alias the first todo and then click it\ncy.get('.todo-list li').eq(0).as('firstTodo').find('.toggle').uncheck(); // reference the .toggle-all element again\n// and make sure its not checked\ncy.get('@toggleAll').should('not.be.checked'); // reference the first todo again and now toggle it\ncy.get('@firstTodo').find('.toggle').check(); // assert the toggle all is checked again\ncy.get('@toggleAll').should('be.checked');",
                  "err": {},
                  "uuid": "ac72068e-7e05-4918-8fec-09e584d3cccb",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "5b75e9ff-232f-4c9b-8c43-e8176f33f047",
                "bdb355c4-badb-4353-b207-80ddfd2bc4c0",
                "ac72068e-7e05-4918-8fec-09e584d3cccb"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3182af2f-27f0-4e4b-bac2-cbbc365844a4",
              "title": "Item",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to mark items as complete",
                  "fullTitle": "TodoMVC - React Item should allow me to mark items as complete",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// we are aliasing the return value of\n// our custom command 'createTodo'\n//\n// the return value is the <li> in the <ul.todos-list>\ncy.createTodo(TODO_ITEM_ONE).as('firstTodo');\ncy.createTodo(TODO_ITEM_TWO).as('secondTodo');\ncy.get('@firstTodo').find('.toggle').check();\ncy.get('@firstTodo').should('have.class', 'completed');\ncy.get('@secondTodo').should('not.have.class', 'completed');\ncy.get('@secondTodo').find('.toggle').check();\ncy.get('@firstTodo').should('have.class', 'completed');\ncy.get('@secondTodo').should('have.class', 'completed');",
                  "err": {},
                  "uuid": "88d91f1e-eaf4-4331-a1b4-0d1d6815b197",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow me to un-mark items as complete",
                  "fullTitle": "TodoMVC - React Item should allow me to un-mark items as complete",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.createTodo(TODO_ITEM_ONE).as('firstTodo');\ncy.createTodo(TODO_ITEM_TWO).as('secondTodo');\ncy.get('@firstTodo').find('.toggle').check();\ncy.get('@firstTodo').should('have.class', 'completed');\ncy.get('@secondTodo').should('not.have.class', 'completed');\ncy.get('@firstTodo').find('.toggle').uncheck();\ncy.get('@firstTodo').should('not.have.class', 'completed');\ncy.get('@secondTodo').should('not.have.class', 'completed');",
                  "err": {},
                  "uuid": "feafd8e3-08b0-4dbf-ad0f-bc8ce07f0063",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow me to edit an item",
                  "fullTitle": "TodoMVC - React Item should allow me to edit an item",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.createDefaultTodos().as('todos');\ncy.get('@todos').eq(1).as('secondTodo') // TODO: fix this, dblclick should\n// have been issued to label\n.find('label').dblclick(); // clear out the inputs current value\n// and type a new value\ncy.get('@secondTodo').find('.edit').clear().type('buy some sausages').type('{enter}'); // explicitly assert about the text value\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@secondTodo').should('contain', 'buy some sausages');\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "ba291506-c8ee-4065-803e-09db7ef0de28",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "88d91f1e-eaf4-4331-a1b4-0d1d6815b197",
                "feafd8e3-08b0-4dbf-ad0f-bc8ce07f0063",
                "ba291506-c8ee-4065-803e-09db7ef0de28"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3a85f9f1-e98a-4f83-8593-5af1b9739e65",
              "title": "Editing",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should hide other controls when editing",
                  "fullTitle": "TodoMVC - React Editing should hide other controls when editing",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.toggle').should('not.be.visible');\ncy.get('@secondTodo').find('label').should('not.be.visible');",
                  "err": {},
                  "uuid": "2a102c5a-65ff-482f-9e00-fde3e5c87ce9",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should save edits on blur",
                  "fullTitle": "TodoMVC - React Editing should save edits on blur",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('buy some sausages') // we can just send the blur event directly\n// to the input instead of having to click\n// on another button on the page. though you\n// could do that its just more mental work\n.blur();\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@secondTodo').should('contain', 'buy some sausages');\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "6af2a59d-60d7-469d-9296-25cc1112188e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should trim entered text",
                  "fullTitle": "TodoMVC - React Editing should trim entered text",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('    buy some sausages    ').type('{enter}');\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@secondTodo').should('contain', 'buy some sausages');\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "eff6bbd7-a49a-4b8a-a880-4d48bf62bf28",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should remove the item if an empty text string was entered",
                  "fullTitle": "TodoMVC - React Editing should remove the item if an empty text string was entered",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('{enter}');\ncy.get('@todos').should('have.length', 2);",
                  "err": {},
                  "uuid": "d8afb1b7-c548-45a9-b9e7-28493f2b4006",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should cancel edits on escape",
                  "fullTitle": "TodoMVC - React Editing should cancel edits on escape",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('foo{esc}');\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).should('contain', TODO_ITEM_TWO);\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "2edb158c-8587-4aca-8b96-803d38649586",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "2a102c5a-65ff-482f-9e00-fde3e5c87ce9",
                "6af2a59d-60d7-469d-9296-25cc1112188e",
                "eff6bbd7-a49a-4b8a-a880-4d48bf62bf28",
                "d8afb1b7-c548-45a9-b9e7-28493f2b4006",
                "2edb158c-8587-4aca-8b96-803d38649586"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fa2c58ef-4eb0-4627-a2ef-699d6195ef54",
              "title": "Counter",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display the current number of todo items",
                  "fullTitle": "TodoMVC - React Counter should display the current number of todo items",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.createTodo(TODO_ITEM_ONE);\ncy.get('.todo-count').contains('1 item left');\ncy.createTodo(TODO_ITEM_TWO);\ncy.get('.todo-count').contains('2 items left');",
                  "err": {},
                  "uuid": "b68b4630-0220-4879-94db-d331bf5a0dbf",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "b68b4630-0220-4879-94db-d331bf5a0dbf"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "62ef6f43-8be8-4df3-a522-312101f5c828",
              "title": "Clear completed button",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display the correct text",
                  "fullTitle": "TodoMVC - React Clear completed button should display the correct text",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(0).find('.toggle').check();\ncy.get('.clear-completed').contains('Clear completed');",
                  "err": {},
                  "uuid": "2bfb65b2-b6ca-432d-aba5-98db9137e58f",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should remove completed items when clicked",
                  "fullTitle": "TodoMVC - React Clear completed button should remove completed items when clicked",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.clear-completed').click();\ncy.get('@todos').should('have.length', 2);\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "fd33db08-7cc8-44e4-a92d-2a17719d5d8d",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should be hidden when there are no items that are completed",
                  "fullTitle": "TodoMVC - React Clear completed button should be hidden when there are no items that are completed",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.clear-completed').should('be.visible').click();\ncy.get('.clear-completed').should('not.exist');",
                  "err": {},
                  "uuid": "4a3a38b2-c250-4dde-902b-466ef7fbc9e9",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "2bfb65b2-b6ca-432d-aba5-98db9137e58f",
                "fd33db08-7cc8-44e4-a92d-2a17719d5d8d",
                "4a3a38b2-c250-4dde-902b-466ef7fbc9e9"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e455c6d9-a4eb-4bfc-b1c9-d375d21213e6",
              "title": "Persistence",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should persist its data",
                  "fullTitle": "TodoMVC - React Persistence should persist its data",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// mimicking TodoMVC tests\n// by writing out this function\nfunction testState() {\n  cy.get('@firstTodo').should('contain', TODO_ITEM_ONE).and('have.class', 'completed');\n  cy.get('@secondTodo').should('contain', TODO_ITEM_TWO).and('not.have.class', 'completed');\n}\ncy.createTodo(TODO_ITEM_ONE).as('firstTodo');\ncy.createTodo(TODO_ITEM_TWO).as('secondTodo');\ncy.get('@firstTodo').find('.toggle').check().then(testState).reload().then(testState);",
                  "err": {},
                  "uuid": "cf68fe03-83e9-495b-8dbf-b6be917114e5",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "cf68fe03-83e9-495b-8dbf-b6be917114e5"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "39f01160-c371-4610-a100-7212e1c3b0ba",
              "title": "Routing",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to display active items",
                  "fullTitle": "TodoMVC - React Routing should allow me to display active items",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Active').click();\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "180d9c13-5642-41bc-a63c-73aaef204b8b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should respect the back button",
                  "fullTitle": "TodoMVC - React Routing should respect the back button",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Active').click();\ncy.get('.filters').contains('Completed').click();\ncy.get('@todos').should('have.length', 1);\ncy.go('back');\ncy.get('@todos').should('have.length', 2);\ncy.go('back');\ncy.get('@todos').should('have.length', 3);",
                  "err": {},
                  "uuid": "35da8f1e-3f0f-48de-b320-eed20a6cef0e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow me to display completed items",
                  "fullTitle": "TodoMVC - React Routing should allow me to display completed items",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Completed').click();\ncy.get('@todos').should('have.length', 1);",
                  "err": {},
                  "uuid": "6e5e14b9-803a-43a4-b465-34830d632a5c",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow me to display all items",
                  "fullTitle": "TodoMVC - React Routing should allow me to display all items",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Active').click();\ncy.get('.filters').contains('Completed').click();\ncy.get('.filters').contains('All').click();\ncy.get('@todos').should('have.length', 3);",
                  "err": {},
                  "uuid": "d4ecb093-9a39-4738-9ea3-08e5406e16e0",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should highlight the currently applied filter",
                  "fullTitle": "TodoMVC - React Routing should highlight the currently applied filter",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// using a within here which will automatically scope\n// nested 'cy' queries to our parent element <ul.filters>\ncy.get('.filters').within(function () {\n  cy.contains('All').should('have.class', 'selected');\n  cy.contains('Active').click().should('have.class', 'selected');\n  cy.contains('Completed').click().should('have.class', 'selected');\n});",
                  "err": {},
                  "uuid": "4f375b06-82b1-43a6-911d-cb8af487767b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "180d9c13-5642-41bc-a63c-73aaef204b8b",
                "35da8f1e-3f0f-48de-b320-eed20a6cef0e",
                "6e5e14b9-803a-43a4-b465-34830d632a5c",
                "d4ecb093-9a39-4738-9ea3-08e5406e16e0",
                "4f375b06-82b1-43a6-911d-cb8af487767b"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/results/reports",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}