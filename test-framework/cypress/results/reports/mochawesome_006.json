{
  "stats": {
    "suites": 10,
    "tests": 15,
    "passes": 4,
    "pending": 0,
    "failures": 11,
    "start": "2022-09-12T11:16:06.599Z",
    "end": "2022-09-12T11:16:14.681Z",
    "duration": 8082,
    "testsRegistered": 27,
    "passPercent": 14.814814814814813,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 12,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "15e2f040-776d-41e3-9347-389d8e26302f",
      "title": "",
      "fullFile": "cypress\\tests\\app.cy.js",
      "file": "cypress\\tests\\app.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "eef49c3b-5bdd-4ce1-9582-b9dfa7584c44",
          "title": "TodoMVC - React",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "984ae64c-eb19-4c3b-9d17-bc85f954e2e7",
              "title": "Add todo test presentation",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should add 2 todos",
                  "fullTitle": "TodoMVC - React Add todo test presentation Should add 2 todos",
                  "timedOut": null,
                  "duration": 673,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.new-todo').type('learn testing{enter}').type('be cool{enter}');\ncy.get('.todo-list li').should('have.length', 2);",
                  "err": {},
                  "uuid": "0640e654-9f1e-4bb8-ba76-fc2811b40b33",
                  "parentUUID": "984ae64c-eb19-4c3b-9d17-bc85f954e2e7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0640e654-9f1e-4bb8-ba76-fc2811b40b33"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 673,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e30e7361-ed6a-4036-a798-246c20010c1d",
              "title": "New Todo",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to add todo items",
                  "fullTitle": "TodoMVC - React New Todo should allow me to add todo items",
                  "timedOut": null,
                  "duration": 818,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// create 1st todo\ncy.get('.new-todo').type(TODO_ITEM_ONE).type('{enter}'); // make sure the 1st label contains the 1st todo text\ncy.get('.todo-list li').eq(0).find('label').should('contain', TODO_ITEM_ONE); // create 2nd todo\ncy.get('.new-todo').type(TODO_ITEM_TWO).type('{enter}'); // make sure the 2nd label contains the 2nd todo text\ncy.get('.todo-list li').eq(1).find('label').should('contain', TODO_ITEM_TWO);",
                  "err": {},
                  "uuid": "9bae2b0d-d264-4633-818a-cabd8b9a8f30",
                  "parentUUID": "e30e7361-ed6a-4036-a798-246c20010c1d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "adds items",
                  "fullTitle": "TodoMVC - React New Todo adds items",
                  "timedOut": null,
                  "duration": 819,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// create several todos then check the number of items in the list\ncy.get('.new-todo').type('todo A{enter}').type('todo B{enter}') // we can continue working with same element\n.type('todo C{enter}') // and keep adding new items\n.type('todo D{enter}');\ncy.get('.todo-list li').should('have.length', 4);",
                  "err": {},
                  "uuid": "2e0eed28-301f-4ab6-bd1e-bb5371e628af",
                  "parentUUID": "e30e7361-ed6a-4036-a798-246c20010c1d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should clear text input field when an item is added",
                  "fullTitle": "TodoMVC - React New Todo should clear text input field when an item is added",
                  "timedOut": null,
                  "duration": 543,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.new-todo').type(TODO_ITEM_ONE).type('{enter}');\ncy.get('.new-todo').should('have.text', '');",
                  "err": {},
                  "uuid": "4f2e40b3-1ba2-4bfc-8f85-ba9579fe2c82",
                  "parentUUID": "e30e7361-ed6a-4036-a798-246c20010c1d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should append new items to the bottom of the list",
                  "fullTitle": "TodoMVC - React New Todo should append new items to the bottom of the list",
                  "timedOut": null,
                  "duration": 279,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// this is an example of a custom command\n// defined in cypress/support/commands.js\ncy.createDefaultTodos().as('todos'); // even though the text content is split across\n// multiple <span> and <strong> elements\n// `cy.contains` can verify this correctly\ncy.get('.todo-count').contains('3 items left');\ncy.get('@todos').eq(0).find('label').should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).find('label').should('contain', TODO_ITEM_TWO);\ncy.get('@todos').eq(2).find('label').should('contain', TODO_ITEM_THREE);",
                  "err": {
                    "message": "TypeError: cy.createDefaultTodos is not a function",
                    "estack": "TypeError: cy.createDefaultTodos is not a function\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:170:10)",
                    "diff": null
                  },
                  "uuid": "afaeb160-137e-4dd9-a5b2-7c20b5679004",
                  "parentUUID": "e30e7361-ed6a-4036-a798-246c20010c1d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show #main and #footer when items added",
                  "fullTitle": "TodoMVC - React New Todo should show #main and #footer when items added",
                  "timedOut": null,
                  "duration": 259,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.createTodo(TODO_ITEM_ONE);\ncy.get('.main').should('be.visible');\ncy.get('.footer').should('be.visible');",
                  "err": {
                    "message": "TypeError: cy.createTodo is not a function",
                    "estack": "TypeError: cy.createTodo is not a function\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:180:10)",
                    "diff": null
                  },
                  "uuid": "d619ae38-42f7-4efa-b90b-3d21d2992b79",
                  "parentUUID": "e30e7361-ed6a-4036-a798-246c20010c1d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9bae2b0d-d264-4633-818a-cabd8b9a8f30",
                "2e0eed28-301f-4ab6-bd1e-bb5371e628af",
                "4f2e40b3-1ba2-4bfc-8f85-ba9579fe2c82"
              ],
              "failures": [
                "afaeb160-137e-4dd9-a5b2-7c20b5679004",
                "d619ae38-42f7-4efa-b90b-3d21d2992b79"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2718,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6ba787b7-299f-40ec-b8b3-870bc17a00bb",
              "title": "Mark all as completed",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to mark all items as completed",
                  "fullTitle": "TodoMVC - React Mark all as completed should allow me to mark all items as completed",
                  "timedOut": null,
                  "duration": 157,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// complete all todos\n// we use 'check' instead of 'click'\n// because that indicates our intention much clearer\ncy.get('.toggle-all').check(); // get each todo li and ensure its class is 'completed'\ncy.get('@todos').eq(0).should('have.class', 'completed');\ncy.get('@todos').eq(1).should('have.class', 'completed');\ncy.get('@todos').eq(2).should('have.class', 'completed');",
                  "err": {
                    "message": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Mark all as completed`",
                    "estack": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Mark all as completed`\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:195:10)",
                    "diff": null
                  },
                  "uuid": "6711805f-6fa1-4b6f-abb5-621e0d1ea6aa",
                  "parentUUID": "6ba787b7-299f-40ec-b8b3-870bc17a00bb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow me to clear the complete state of all items",
                  "fullTitle": "TodoMVC - React Mark all as completed should allow me to clear the complete state of all items",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// check and then immediately uncheck\ncy.get('.toggle-all').check().uncheck();\ncy.get('@todos').eq(0).should('not.have.class', 'completed');\ncy.get('@todos').eq(1).should('not.have.class', 'completed');\ncy.get('@todos').eq(2).should('not.have.class', 'completed');",
                  "err": {},
                  "uuid": "91dd68b2-858a-4633-973f-31b827a95b43",
                  "parentUUID": "6ba787b7-299f-40ec-b8b3-870bc17a00bb",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "complete all checkbox should update state when items are completed / cleared",
                  "fullTitle": "TodoMVC - React Mark all as completed complete all checkbox should update state when items are completed / cleared",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// alias the .toggle-all for reuse later\ncy.get('.toggle-all').as('toggleAll').check() // this assertion is silly here IMO but\n// it is what TodoMVC does\n.should('be.checked'); // alias the first todo and then click it\ncy.get('.todo-list li').eq(0).as('firstTodo').find('.toggle').uncheck(); // reference the .toggle-all element again\n// and make sure its not checked\ncy.get('@toggleAll').should('not.be.checked'); // reference the first todo again and now toggle it\ncy.get('@firstTodo').find('.toggle').check(); // assert the toggle all is checked again\ncy.get('@toggleAll').should('be.checked');",
                  "err": {},
                  "uuid": "2dabea48-a0f6-48bf-a728-0bcdecb1738d",
                  "parentUUID": "6ba787b7-299f-40ec-b8b3-870bc17a00bb",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "6711805f-6fa1-4b6f-abb5-621e0d1ea6aa"
              ],
              "pending": [],
              "skipped": [
                "91dd68b2-858a-4633-973f-31b827a95b43",
                "2dabea48-a0f6-48bf-a728-0bcdecb1738d"
              ],
              "duration": 157,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3bbe939b-c905-4508-97ae-f1e13bab2d5c",
              "title": "Item",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to mark items as complete",
                  "fullTitle": "TodoMVC - React Item should allow me to mark items as complete",
                  "timedOut": null,
                  "duration": 312,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// we are aliasing the return value of\n// our custom command 'createTodo'\n//\n// the return value is the <li> in the <ul.todos-list>\ncy.createTodo(TODO_ITEM_ONE).as('firstTodo');\ncy.createTodo(TODO_ITEM_TWO).as('secondTodo');\ncy.get('@firstTodo').find('.toggle').check();\ncy.get('@firstTodo').should('have.class', 'completed');\ncy.get('@secondTodo').should('not.have.class', 'completed');\ncy.get('@secondTodo').find('.toggle').check();\ncy.get('@firstTodo').should('have.class', 'completed');\ncy.get('@secondTodo').should('have.class', 'completed');",
                  "err": {
                    "message": "TypeError: cy.createTodo is not a function",
                    "estack": "TypeError: cy.createTodo is not a function\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:238:10)",
                    "diff": null
                  },
                  "uuid": "0d505d7f-a99c-4db3-aa84-b078d4c410b3",
                  "parentUUID": "3bbe939b-c905-4508-97ae-f1e13bab2d5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow me to un-mark items as complete",
                  "fullTitle": "TodoMVC - React Item should allow me to un-mark items as complete",
                  "timedOut": null,
                  "duration": 280,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.createTodo(TODO_ITEM_ONE).as('firstTodo');\ncy.createTodo(TODO_ITEM_TWO).as('secondTodo');\ncy.get('@firstTodo').find('.toggle').check();\ncy.get('@firstTodo').should('have.class', 'completed');\ncy.get('@secondTodo').should('not.have.class', 'completed');\ncy.get('@firstTodo').find('.toggle').uncheck();\ncy.get('@firstTodo').should('not.have.class', 'completed');\ncy.get('@secondTodo').should('not.have.class', 'completed');",
                  "err": {
                    "message": "TypeError: cy.createTodo is not a function",
                    "estack": "TypeError: cy.createTodo is not a function\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:248:10)",
                    "diff": null
                  },
                  "uuid": "f6eec4bb-d195-4871-9c09-aa3ff4e1412f",
                  "parentUUID": "3bbe939b-c905-4508-97ae-f1e13bab2d5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow me to edit an item",
                  "fullTitle": "TodoMVC - React Item should allow me to edit an item",
                  "timedOut": null,
                  "duration": 276,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.createDefaultTodos().as('todos');\ncy.get('@todos').eq(1).as('secondTodo') // TODO: fix this, dblclick should\n// have been issued to label\n.find('label').dblclick(); // clear out the inputs current value\n// and type a new value\ncy.get('@secondTodo').find('.edit').clear().type('buy some sausages').type('{enter}'); // explicitly assert about the text value\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@secondTodo').should('contain', 'buy some sausages');\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {
                    "message": "TypeError: cy.createDefaultTodos is not a function",
                    "estack": "TypeError: cy.createDefaultTodos is not a function\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:258:10)",
                    "diff": null
                  },
                  "uuid": "bc424e0d-8b53-4703-9720-8dba720c4591",
                  "parentUUID": "3bbe939b-c905-4508-97ae-f1e13bab2d5c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "0d505d7f-a99c-4db3-aa84-b078d4c410b3",
                "f6eec4bb-d195-4871-9c09-aa3ff4e1412f",
                "bc424e0d-8b53-4703-9720-8dba720c4591"
              ],
              "pending": [],
              "skipped": [],
              "duration": 868,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ee89bb87-0b8c-4843-b289-abb760129c08",
              "title": "Editing",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should hide other controls when editing",
                  "fullTitle": "TodoMVC - React Editing should hide other controls when editing",
                  "timedOut": null,
                  "duration": 146,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.toggle').should('not.be.visible');\ncy.get('@secondTodo').find('label').should('not.be.visible');",
                  "err": {
                    "message": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Editing`",
                    "estack": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Editing`\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:275:10)",
                    "diff": null
                  },
                  "uuid": "2645d176-2eb7-430d-a101-5fea83d11ed6",
                  "parentUUID": "ee89bb87-0b8c-4843-b289-abb760129c08",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should save edits on blur",
                  "fullTitle": "TodoMVC - React Editing should save edits on blur",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('buy some sausages') // we can just send the blur event directly\n// to the input instead of having to click\n// on another button on the page. though you\n// could do that its just more mental work\n.blur();\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@secondTodo').should('contain', 'buy some sausages');\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "18f5604e-11af-4c37-8181-49967c4ed749",
                  "parentUUID": "ee89bb87-0b8c-4843-b289-abb760129c08",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should trim entered text",
                  "fullTitle": "TodoMVC - React Editing should trim entered text",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('    buy some sausages    ').type('{enter}');\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@secondTodo').should('contain', 'buy some sausages');\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "d03bd5b6-7ac7-4b59-a420-ab82f58c9ac6",
                  "parentUUID": "ee89bb87-0b8c-4843-b289-abb760129c08",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should remove the item if an empty text string was entered",
                  "fullTitle": "TodoMVC - React Editing should remove the item if an empty text string was entered",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('{enter}');\ncy.get('@todos').should('have.length', 2);",
                  "err": {},
                  "uuid": "2565e982-c3dc-4ec0-b586-5be14c2fd36b",
                  "parentUUID": "ee89bb87-0b8c-4843-b289-abb760129c08",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should cancel edits on escape",
                  "fullTitle": "TodoMVC - React Editing should cancel edits on escape",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('foo{esc}');\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).should('contain', TODO_ITEM_TWO);\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "8a34be03-21f5-4e63-8c70-23e0b7dff3d3",
                  "parentUUID": "ee89bb87-0b8c-4843-b289-abb760129c08",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "2645d176-2eb7-430d-a101-5fea83d11ed6"
              ],
              "pending": [],
              "skipped": [
                "18f5604e-11af-4c37-8181-49967c4ed749",
                "d03bd5b6-7ac7-4b59-a420-ab82f58c9ac6",
                "2565e982-c3dc-4ec0-b586-5be14c2fd36b",
                "8a34be03-21f5-4e63-8c70-23e0b7dff3d3"
              ],
              "duration": 146,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3e830ad5-fe4e-4a88-8767-336dce3a3d6d",
              "title": "Counter",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display the current number of todo items",
                  "fullTitle": "TodoMVC - React Counter should display the current number of todo items",
                  "timedOut": null,
                  "duration": 296,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.createTodo(TODO_ITEM_ONE);\ncy.get('.todo-count').contains('1 item left');\ncy.createTodo(TODO_ITEM_TWO);\ncy.get('.todo-count').contains('2 items left');",
                  "err": {
                    "message": "TypeError: cy.createTodo is not a function",
                    "estack": "TypeError: cy.createTodo is not a function\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:315:10)",
                    "diff": null
                  },
                  "uuid": "74c634b9-85b9-4ec6-9573-105760afecab",
                  "parentUUID": "3e830ad5-fe4e-4a88-8767-336dce3a3d6d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "74c634b9-85b9-4ec6-9573-105760afecab"
              ],
              "pending": [],
              "skipped": [],
              "duration": 296,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "864a46eb-356b-4557-9fa1-939408f25020",
              "title": "Clear completed button",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display the correct text",
                  "fullTitle": "TodoMVC - React Clear completed button should display the correct text",
                  "timedOut": null,
                  "duration": 230,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(0).find('.toggle').check();\ncy.get('.clear-completed').contains('Clear completed');",
                  "err": {
                    "message": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Clear completed button`",
                    "estack": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Clear completed button`\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:323:10)",
                    "diff": null
                  },
                  "uuid": "eb84cd79-bf4c-41ad-b047-e69f6407bc29",
                  "parentUUID": "864a46eb-356b-4557-9fa1-939408f25020",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove completed items when clicked",
                  "fullTitle": "TodoMVC - React Clear completed button should remove completed items when clicked",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.clear-completed').click();\ncy.get('@todos').should('have.length', 2);\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "5db639e9-c24c-42ff-abe1-de0e41914424",
                  "parentUUID": "864a46eb-356b-4557-9fa1-939408f25020",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should be hidden when there are no items that are completed",
                  "fullTitle": "TodoMVC - React Clear completed button should be hidden when there are no items that are completed",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.clear-completed').should('be.visible').click();\ncy.get('.clear-completed').should('not.exist');",
                  "err": {},
                  "uuid": "4126f355-4cbe-4771-ae23-a989ca4f2004",
                  "parentUUID": "864a46eb-356b-4557-9fa1-939408f25020",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "eb84cd79-bf4c-41ad-b047-e69f6407bc29"
              ],
              "pending": [],
              "skipped": [
                "5db639e9-c24c-42ff-abe1-de0e41914424",
                "4126f355-4cbe-4771-ae23-a989ca4f2004"
              ],
              "duration": 230,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "260e4750-9c41-4711-8bca-0fdb922ab016",
              "title": "Persistence",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should persist its data",
                  "fullTitle": "TodoMVC - React Persistence should persist its data",
                  "timedOut": null,
                  "duration": 324,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// mimicking TodoMVC tests\n// by writing out this function\nfunction testState() {\n  cy.get('@firstTodo').should('contain', TODO_ITEM_ONE).and('have.class', 'completed');\n  cy.get('@secondTodo').should('contain', TODO_ITEM_TWO).and('not.have.class', 'completed');\n}\ncy.createTodo(TODO_ITEM_ONE).as('firstTodo');\ncy.createTodo(TODO_ITEM_TWO).as('secondTodo');\ncy.get('@firstTodo').find('.toggle').check().then(testState).reload().then(testState);",
                  "err": {
                    "message": "TypeError: cy.createTodo is not a function",
                    "estack": "TypeError: cy.createTodo is not a function\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:351:10)",
                    "diff": null
                  },
                  "uuid": "60b02316-85ca-406c-8c98-ef6e9d363cd8",
                  "parentUUID": "260e4750-9c41-4711-8bca-0fdb922ab016",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "60b02316-85ca-406c-8c98-ef6e9d363cd8"
              ],
              "pending": [],
              "skipped": [],
              "duration": 324,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cdebff7a-4509-48ac-b9ce-f6fdf830a1fd",
              "title": "Routing",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to display active items",
                  "fullTitle": "TodoMVC - React Routing should allow me to display active items",
                  "timedOut": null,
                  "duration": 186,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Active').click();\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).should('contain', TODO_ITEM_THREE);",
                  "err": {
                    "message": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Routing`",
                    "estack": "TypeError: cy.createDefaultTodos is not a function\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Routing`\n    at Context.eval (http://127.0.0.1:8887/__cypress/tests?p=cypress\\tests\\app.cy.js:363:10)",
                    "diff": null
                  },
                  "uuid": "6b643de6-d28b-4442-ba7f-cf3693b371a3",
                  "parentUUID": "cdebff7a-4509-48ac-b9ce-f6fdf830a1fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respect the back button",
                  "fullTitle": "TodoMVC - React Routing should respect the back button",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Active').click();\ncy.get('.filters').contains('Completed').click();\ncy.get('@todos').should('have.length', 1);\ncy.go('back');\ncy.get('@todos').should('have.length', 2);\ncy.go('back');\ncy.get('@todos').should('have.length', 3);",
                  "err": {},
                  "uuid": "8d16d13f-8b9c-4040-a8b1-50dda125d664",
                  "parentUUID": "cdebff7a-4509-48ac-b9ce-f6fdf830a1fd",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow me to display completed items",
                  "fullTitle": "TodoMVC - React Routing should allow me to display completed items",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Completed').click();\ncy.get('@todos').should('have.length', 1);",
                  "err": {},
                  "uuid": "bb99b548-c092-4c61-8dd0-a1ed1612fd7c",
                  "parentUUID": "cdebff7a-4509-48ac-b9ce-f6fdf830a1fd",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow me to display all items",
                  "fullTitle": "TodoMVC - React Routing should allow me to display all items",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Active').click();\ncy.get('.filters').contains('Completed').click();\ncy.get('.filters').contains('All').click();\ncy.get('@todos').should('have.length', 3);",
                  "err": {},
                  "uuid": "78b23cf0-adfe-410b-b6b1-1315855bfbdd",
                  "parentUUID": "cdebff7a-4509-48ac-b9ce-f6fdf830a1fd",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should highlight the currently applied filter",
                  "fullTitle": "TodoMVC - React Routing should highlight the currently applied filter",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// using a within here which will automatically scope\n// nested 'cy' queries to our parent element <ul.filters>\ncy.get('.filters').within(function () {\n  cy.contains('All').should('have.class', 'selected');\n  cy.contains('Active').click().should('have.class', 'selected');\n  cy.contains('Completed').click().should('have.class', 'selected');\n});",
                  "err": {},
                  "uuid": "e7d48277-e178-429c-a19a-1c4bc93bc363",
                  "parentUUID": "cdebff7a-4509-48ac-b9ce-f6fdf830a1fd",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "6b643de6-d28b-4442-ba7f-cf3693b371a3"
              ],
              "pending": [],
              "skipped": [
                "8d16d13f-8b9c-4040-a8b1-50dda125d664",
                "bb99b548-c092-4c61-8dd0-a1ed1612fd7c",
                "78b23cf0-adfe-410b-b6b1-1315855bfbdd",
                "e7d48277-e178-429c-a19a-1c4bc93bc363"
              ],
              "duration": 186,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/results/reports",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}